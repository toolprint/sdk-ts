// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client
} from '@hey-api/client-axios'
import type {
  GetAiDocumentationAiTxtGetData,
  GetAiDocumentationAiTxtGetResponses,
  DeleteAccountApiV1AccountDeleteData,
  DeleteAccountApiV1AccountDeleteResponses,
  GetAccountInformationApiV1AccountGetData,
  GetAccountInformationApiV1AccountGetResponses,
  CreateAccountApiV1AccountPostData,
  CreateAccountApiV1AccountPostResponses,
  GetApiKeyApiV1AccountApiKeyGetData,
  GetApiKeyApiV1AccountApiKeyGetResponses,
  GetAuthStatusApiV1AccountAuthStatusGetData,
  GetAuthStatusApiV1AccountAuthStatusGetResponses,
  CreateAccountByInvitationApiV1AccountInvitationCodePostData,
  CreateAccountByInvitationApiV1AccountInvitationCodePostResponses,
  CreateAccountByInvitationApiV1AccountInvitationCodePostErrors,
  GetServiceTokenApiV1AccountServiceTokenGetData,
  GetServiceTokenApiV1AccountServiceTokenGetResponses,
  RotateServiceTokenApiV1AccountServiceTokenPostData,
  RotateServiceTokenApiV1AccountServiceTokenPostResponses,
  GetAuditLogsApiV1AuditGetData,
  GetAuditLogsApiV1AuditGetResponses,
  GetAuditLogsApiV1AuditGetErrors,
  GetAllFlagsApiV1FlagsGetData,
  GetAllFlagsApiV1FlagsGetResponses,
  ListIntegrationsApiV1IntegrationsGetData,
  ListIntegrationsApiV1IntegrationsGetResponses,
  ListIntegrationsApiV1IntegrationsGetErrors,
  GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetData,
  GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetResponses,
  GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetErrors,
  UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostData,
  UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostResponses,
  UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostErrors,
  GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetData,
  GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetResponses,
  GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetErrors,
  DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteData,
  DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteResponses,
  DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteErrors,
  UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostData,
  UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostResponses,
  UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostErrors,
  GetAllPoliciesApiV1PoliciesGetData,
  GetAllPoliciesApiV1PoliciesGetResponses,
  GetAllPoliciesApiV1PoliciesGetErrors,
  CreatePolicyApiV1PoliciesPostData,
  CreatePolicyApiV1PoliciesPostResponses,
  CreatePolicyApiV1PoliciesPostErrors,
  GetApprovalRequestsApiV1PoliciesApprovalsGetData,
  GetApprovalRequestsApiV1PoliciesApprovalsGetResponses,
  GetApprovalRequestsApiV1PoliciesApprovalsGetErrors,
  CheckResourceAccessGetApiV1PoliciesResourcesCheckGetData,
  CheckResourceAccessGetApiV1PoliciesResourcesCheckGetResponses,
  CheckResourceAccessApiV1PoliciesResourcesCheckPostData,
  CheckResourceAccessApiV1PoliciesResourcesCheckPostResponses,
  CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetData,
  CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetResponses,
  CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetErrors,
  GetPolicyApiV1PoliciesPolicyIdGetData,
  GetPolicyApiV1PoliciesPolicyIdGetResponses,
  GetPolicyApiV1PoliciesPolicyIdGetErrors,
  UpdatePolicyApiV1PoliciesPolicyIdPutData,
  UpdatePolicyApiV1PoliciesPolicyIdPutResponses,
  UpdatePolicyApiV1PoliciesPolicyIdPutErrors,
  CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostData,
  CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostResponses,
  CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostErrors,
  ListProvidersApiV1ProvidersGetData,
  ListProvidersApiV1ProvidersGetResponses,
  GetProviderApiV1ProvidersProviderIdGetData,
  GetProviderApiV1ProvidersProviderIdGetResponses,
  GetProviderApiV1ProvidersProviderIdGetErrors,
  GetServersApiV1ProvidersProviderIdServersGetData,
  GetServersApiV1ProvidersProviderIdServersGetResponses,
  GetServersApiV1ProvidersProviderIdServersGetErrors,
  SyncProviderApiV1ProvidersProviderIdSyncPostData,
  SyncProviderApiV1ProvidersProviderIdSyncPostResponses,
  SyncProviderApiV1ProvidersProviderIdSyncPostErrors,
  InitializeApiV1SdkInitializeGetData,
  InitializeApiV1SdkInitializeGetResponses,
  GetServiceTokenApiV1SdkServiceTokenGetData,
  GetServiceTokenApiV1SdkServiceTokenGetResponses,
  ReindexApiV1SearchReindexPostData,
  ReindexApiV1SearchReindexPostResponses,
  ReindexToolprintsApiV1SearchReindexToolprintsPostData,
  ReindexToolprintsApiV1SearchReindexToolprintsPostResponses,
  ReindexToolsApiV1SearchReindexToolsPostData,
  ReindexToolsApiV1SearchReindexToolsPostResponses,
  SearchToolprintsApiV1SearchToolprintsPostData,
  SearchToolprintsApiV1SearchToolprintsPostResponses,
  SearchToolprintsApiV1SearchToolprintsPostErrors,
  GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostData,
  GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostResponses,
  GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostErrors,
  SearchToolsApiV1SearchToolsPostData,
  SearchToolsApiV1SearchToolsPostResponses,
  SearchToolsApiV1SearchToolsPostErrors,
  GetSecretsApiV1SecretsGetData,
  GetSecretsApiV1SecretsGetResponses,
  GetSecretApiV1SecretsSecretNameGetData,
  GetSecretApiV1SecretsSecretNameGetResponses,
  GetSecretApiV1SecretsSecretNameGetErrors,
  UpsertSecretApiV1SecretsSecretNamePutData,
  UpsertSecretApiV1SecretsSecretNamePutResponses,
  UpsertSecretApiV1SecretsSecretNamePutErrors,
  ListServersApiV1ServersGetData,
  ListServersApiV1ServersGetResponses,
  GetServerApiV1ServersServerIdGetData,
  GetServerApiV1ServersServerIdGetResponses,
  GetServerApiV1ServersServerIdGetErrors,
  GetServerClientApiV1ServersServerIdClientGetData,
  GetServerClientApiV1ServersServerIdClientGetResponses,
  GetServerClientApiV1ServersServerIdClientGetErrors,
  GetServerPropertiesApiV1ServersServerIdPropertiesGetData,
  GetServerPropertiesApiV1ServersServerIdPropertiesGetResponses,
  GetServerPropertiesApiV1ServersServerIdPropertiesGetErrors,
  PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchData,
  PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchResponses,
  PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchErrors,
  GetStrategyApiV1StrategyPostData,
  GetStrategyApiV1StrategyPostResponses,
  GetStrategyApiV1StrategyPostErrors,
  CreateFakeRecipesApiV1StrategyFakePostData,
  CreateFakeRecipesApiV1StrategyFakePostResponses,
  CreateToolprintApiV1ToolprintsPostData,
  CreateToolprintApiV1ToolprintsPostResponses,
  CreateToolprintApiV1ToolprintsPostErrors,
  GetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetData,
  GetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetResponses,
  GetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetData,
  GetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetResponses,
  GetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetData,
  GetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetResponses,
  CreateToolprintJsonApiV1ToolprintsJsonPostData,
  CreateToolprintJsonApiV1ToolprintsJsonPostResponses,
  CreateToolprintJsonApiV1ToolprintsJsonPostErrors,
  ValidateToolprintApiV1ToolprintsValidatePostData,
  ValidateToolprintApiV1ToolprintsValidatePostResponses,
  ValidateToolprintApiV1ToolprintsValidatePostErrors,
  ValidateToolprintJsonApiV1ToolprintsValidateJsonPostData,
  ValidateToolprintJsonApiV1ToolprintsValidateJsonPostResponses,
  ValidateToolprintJsonApiV1ToolprintsValidateJsonPostErrors,
  ValidateToolprintYamlApiV1ToolprintsValidateYamlPostData,
  ValidateToolprintYamlApiV1ToolprintsValidateYamlPostResponses,
  ValidateToolprintYamlApiV1ToolprintsValidateYamlPostErrors,
  CreateToolprintYamlApiV1ToolprintsYamlPostData,
  CreateToolprintYamlApiV1ToolprintsYamlPostResponses,
  CreateToolprintYamlApiV1ToolprintsYamlPostErrors,
  GetToolprintApiV1ToolprintsToolprintIdGetData,
  GetToolprintApiV1ToolprintsToolprintIdGetResponses,
  GetToolprintApiV1ToolprintsToolprintIdGetErrors,
  ListToolsApiV1ToolsGetData,
  ListToolsApiV1ToolsGetResponses,
  GetToolResourcesBatchApiV1ToolsResourcesBatchPostData,
  GetToolResourcesBatchApiV1ToolsResourcesBatchPostResponses,
  GetToolResourcesBatchApiV1ToolsResourcesBatchPostErrors,
  GetToolApiV1ToolsToolIdGetData,
  GetToolApiV1ToolsToolIdGetResponses,
  GetToolApiV1ToolsToolIdGetErrors,
  GetToolPropertiesApiV1ToolsToolIdPropertiesGetData,
  GetToolPropertiesApiV1ToolsToolIdPropertiesGetResponses,
  GetToolPropertiesApiV1ToolsToolIdPropertiesGetErrors,
  GetToolResourceApiV1ToolsToolIdResourceGetData,
  GetToolResourceApiV1ToolsToolIdResourceGetResponses,
  GetToolResourceApiV1ToolsToolIdResourceGetErrors,
  HealthHealthGetData,
  HealthHealthGetResponses
} from './types.gen.js'
import {
  zGetAiDocumentationAiTxtGetResponse,
  zDeleteAccountApiV1AccountDeleteResponse,
  zGetAccountInformationApiV1AccountGetResponse,
  zCreateAccountApiV1AccountPostResponse,
  zGetApiKeyApiV1AccountApiKeyGetResponse,
  zGetAuthStatusApiV1AccountAuthStatusGetResponse,
  zCreateAccountByInvitationApiV1AccountInvitationCodePostResponse,
  zGetServiceTokenApiV1AccountServiceTokenGetResponse,
  zRotateServiceTokenApiV1AccountServiceTokenPostResponse,
  zGetAuditLogsApiV1AuditGetResponse,
  zGetAllFlagsApiV1FlagsGetResponse,
  zListIntegrationsApiV1IntegrationsGetResponse,
  zGetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetResponse,
  zUpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostResponse,
  zGetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetResponse,
  zDeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteResponse,
  zUpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostResponse,
  zGetAllPoliciesApiV1PoliciesGetResponse,
  zCreatePolicyApiV1PoliciesPostResponse,
  zGetApprovalRequestsApiV1PoliciesApprovalsGetResponse,
  zCheckResourceAccessGetApiV1PoliciesResourcesCheckGetResponse,
  zCheckResourceAccessApiV1PoliciesResourcesCheckPostResponse,
  zGetPolicyApiV1PoliciesPolicyIdGetResponse,
  zUpdatePolicyApiV1PoliciesPolicyIdPutResponse,
  zListProvidersApiV1ProvidersGetResponse,
  zGetProviderApiV1ProvidersProviderIdGetResponse,
  zGetServersApiV1ProvidersProviderIdServersGetResponse,
  zInitializeApiV1SdkInitializeGetResponse,
  zGetServiceTokenApiV1SdkServiceTokenGetResponse,
  zSearchToolprintsApiV1SearchToolprintsPostResponse,
  zGetToolprintRecommendationApiV1SearchToolprintsRecommendationPostResponse,
  zSearchToolsApiV1SearchToolsPostResponse,
  zGetSecretApiV1SecretsSecretNameGetResponse,
  zUpsertSecretApiV1SecretsSecretNamePutResponse,
  zListServersApiV1ServersGetResponse,
  zGetServerApiV1ServersServerIdGetResponse,
  zGetServerClientApiV1ServersServerIdClientGetResponse,
  zGetServerPropertiesApiV1ServersServerIdPropertiesGetResponse,
  zPatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchResponse,
  zGetStrategyApiV1StrategyPostResponse,
  zCreateFakeRecipesApiV1StrategyFakePostResponse,
  zCreateToolprintApiV1ToolprintsPostResponse,
  zGetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetResponse,
  zGetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetResponse,
  zGetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetResponse,
  zCreateToolprintJsonApiV1ToolprintsJsonPostResponse,
  zValidateToolprintApiV1ToolprintsValidatePostResponse,
  zValidateToolprintYamlApiV1ToolprintsValidateYamlPostResponse,
  zCreateToolprintYamlApiV1ToolprintsYamlPostResponse,
  zGetToolprintApiV1ToolprintsToolprintIdGetResponse,
  zListToolsApiV1ToolsGetResponse,
  zGetToolResourcesBatchApiV1ToolsResourcesBatchPostResponse,
  zGetToolApiV1ToolsToolIdGetResponse,
  zGetToolPropertiesApiV1ToolsToolIdPropertiesGetResponse,
  zGetToolResourceApiV1ToolsToolIdResourceGetResponse
} from './zod.gen.js'
import { client as _heyApiClient } from './client.gen.js'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export class DefaultService {
  /**
   * Get Ai Documentation
   * Returns the complete API documentation including toolprint examples.
   *
   * This endpoint combines:
   * 1. Base API documentation (base_ai.txt)
   * 2. Toolprint example and usage guide (toolprint_example.txt)
   */
  public static getAiDocumentationAiTxtGet<
    ThrowOnError extends boolean = false
  >(options?: Options<GetAiDocumentationAiTxtGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetAiDocumentationAiTxtGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'text',
      responseValidator: async (data) => {
        return await zGetAiDocumentationAiTxtGetResponse.parseAsync(data)
      },
      url: '/ai.txt',
      ...options
    })
  }

  /**
   * Health
   * Generic healthcheck endpoint to ensure the service is running.
   */
  public static healthHealthGet<ThrowOnError extends boolean = false>(
    options?: Options<HealthHealthGetData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      HealthHealthGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      url: '/health',
      ...options
    })
  }
}

export class AccountService {
  /**
   * Delete Account
   */
  public static deleteAccountApiV1AccountDelete<
    ThrowOnError extends boolean = false
  >(options?: Options<DeleteAccountApiV1AccountDeleteData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).delete<
      DeleteAccountApiV1AccountDeleteResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseValidator: async (data) => {
        return await zDeleteAccountApiV1AccountDeleteResponse.parseAsync(data)
      },
      url: '/api/v1/account/',
      ...options
    })
  }

  /**
   * Get Account Information
   */
  public static getAccountInformationApiV1AccountGet<
    ThrowOnError extends boolean = false
  >(options?: Options<GetAccountInformationApiV1AccountGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetAccountInformationApiV1AccountGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseValidator: async (data) => {
        return await zGetAccountInformationApiV1AccountGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/account/',
      ...options
    })
  }

  /**
   * Create Account
   * Creates a new account given an authenticated user if they recently signed up via PropelAuth.
   *
   * NOTE: This only creates the account, not assign the user to an organization.
   * Use invitation codes to assign to an organization.
   */
  public static createAccountApiV1AccountPost<
    ThrowOnError extends boolean = false
  >(options?: Options<CreateAccountApiV1AccountPostData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).post<
      CreateAccountApiV1AccountPostResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseValidator: async (data) => {
        return await zCreateAccountApiV1AccountPostResponse.parseAsync(data)
      },
      url: '/api/v1/account/',
      ...options
    })
  }

  /**
   * Get Api Key
   * Returns the API key information for the authenticated user.
   */
  public static getApiKeyApiV1AccountApiKeyGet<
    ThrowOnError extends boolean = false
  >(options?: Options<GetApiKeyApiV1AccountApiKeyGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetApiKeyApiV1AccountApiKeyGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseValidator: async (data) => {
        return await zGetApiKeyApiV1AccountApiKeyGetResponse.parseAsync(data)
      },
      url: '/api/v1/account/api-key',
      ...options
    })
  }

  /**
   * Get Auth Status
   * Returns the authentications state of the caller. Will read their API Key or JWT and then determine
   * if a OneGrep account exists. If yes, then it will be considered authenticated.
   *
   * # ! NOTE: The User may have a valid JWT but if they do not have a OneGrep account, they will not be considered authenticated.
   */
  public static getAuthStatusApiV1AccountAuthStatusGet<
    ThrowOnError extends boolean = false
  >(
    options?: Options<GetAuthStatusApiV1AccountAuthStatusGetData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetAuthStatusApiV1AccountAuthStatusGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetAuthStatusApiV1AccountAuthStatusGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/account/auth/status',
      ...options
    })
  }

  /**
   * Create Account By Invitation
   * Creates a new account given an authenticated user and a valid invitation code.
   */
  public static createAccountByInvitationApiV1AccountInvitationCodePost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      CreateAccountByInvitationApiV1AccountInvitationCodePostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateAccountByInvitationApiV1AccountInvitationCodePostResponses,
      CreateAccountByInvitationApiV1AccountInvitationCodePostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseValidator: async (data) => {
        return await zCreateAccountByInvitationApiV1AccountInvitationCodePostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/account/invitation-code',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Get Service Token
   * Returns the service token information for the authenticated user.
   */
  public static getServiceTokenApiV1AccountServiceTokenGet<
    ThrowOnError extends boolean = false
  >(
    options?: Options<
      GetServiceTokenApiV1AccountServiceTokenGetData,
      ThrowOnError
    >
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetServiceTokenApiV1AccountServiceTokenGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseValidator: async (data) => {
        return await zGetServiceTokenApiV1AccountServiceTokenGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/account/service-token',
      ...options
    })
  }

  /**
   * Rotate Service Token
   */
  public static rotateServiceTokenApiV1AccountServiceTokenPost<
    ThrowOnError extends boolean = false
  >(
    options?: Options<
      RotateServiceTokenApiV1AccountServiceTokenPostData,
      ThrowOnError
    >
  ) {
    return (options?.client ?? _heyApiClient).post<
      RotateServiceTokenApiV1AccountServiceTokenPostResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseValidator: async (data) => {
        return await zRotateServiceTokenApiV1AccountServiceTokenPostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/account/service-token',
      ...options
    })
  }
}

export class AuditService {
  /**
   * Get Audit Logs
   * Gets audit logs visible to the user with pagination and filtering.
   *
   * - Page numbers start at 1 (not 0)
   * - Results are sorted by timestamp (newest first)
   * - Optional filters can be applied for policy_id, action, and date range
   */
  public static getAuditLogsApiV1AuditGet<ThrowOnError extends boolean = false>(
    options?: Options<GetAuditLogsApiV1AuditGetData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetAuditLogsApiV1AuditGetResponses,
      GetAuditLogsApiV1AuditGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetAuditLogsApiV1AuditGetResponse.parseAsync(data)
      },
      url: '/api/v1/audit/',
      ...options
    })
  }
}

export class FlagsService {
  /**
   * Get All Flags
   */
  public static getAllFlagsApiV1FlagsGet<ThrowOnError extends boolean = false>(
    options?: Options<GetAllFlagsApiV1FlagsGetData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetAllFlagsApiV1FlagsGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetAllFlagsApiV1FlagsGetResponse.parseAsync(data)
      },
      url: '/api/v1/flags/',
      ...options
    })
  }
}

export class IntegrationsService {
  /**
   * List Integrations
   * Lists all available integrations for a user's organization.
   * If active is true, only returns integrations that have an active tool server.
   */
  public static listIntegrationsApiV1IntegrationsGet<
    ThrowOnError extends boolean = false
  >(options?: Options<ListIntegrationsApiV1IntegrationsGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      ListIntegrationsApiV1IntegrationsGetResponses,
      ListIntegrationsApiV1IntegrationsGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zListIntegrationsApiV1IntegrationsGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/integrations/',
      ...options
    })
  }

  /**
   * Get Integration Tools
   * Returns details for a tool in an integration available to a user.
   */
  public static getIntegrationToolsApiV1IntegrationsIntegrationNameToolsGet<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).get<
      GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetResponses,
      GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/integrations/{integration_name}/tools',
      ...options
    })
  }

  /**
   * Upsert Multiple Tool Custom Tags
   * Upserts custom tags for multiple tools in an integration.
   */
  public static upsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostResponses,
      UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zUpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/integrations/{integration_name}/tools/custom/tags',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Get Tool Details
   * Returns the details for a tool in an integration.
   */
  public static getToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGet<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).get<
      GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetResponses,
      GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/integrations/{integration_name}/tools/{tool_name}',
      ...options
    })
  }

  /**
   * Delete Tool Custom Tags
   * Deletes custom tags for a tool in an integration.
   */
  public static deleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDelete<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteResponses,
      DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zDeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/integrations/{integration_name}/tools/{tool_name}/custom/tags',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Upsert Tool Custom Tags
   * Upserts custom tags for a tool in an integration. Will not delete any existing tags but will update any
   * overlapping tags that are already set.
   */
  public static upsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostResponses,
      UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zUpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/integrations/{integration_name}/tools/{tool_name}/custom/tags',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class PoliciesService {
  /**
   * Get All Policies
   */
  public static getAllPoliciesApiV1PoliciesGet<
    ThrowOnError extends boolean = false
  >(options?: Options<GetAllPoliciesApiV1PoliciesGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetAllPoliciesApiV1PoliciesGetResponses,
      GetAllPoliciesApiV1PoliciesGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetAllPoliciesApiV1PoliciesGetResponse.parseAsync(data)
      },
      url: '/api/v1/policies/',
      ...options
    })
  }

  /**
   * Create Policy
   */
  public static createPolicyApiV1PoliciesPost<
    ThrowOnError extends boolean = false
  >(options: Options<CreatePolicyApiV1PoliciesPostData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      CreatePolicyApiV1PoliciesPostResponses,
      CreatePolicyApiV1PoliciesPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zCreatePolicyApiV1PoliciesPostResponse.parseAsync(data)
      },
      url: '/api/v1/policies/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Get Approval Requests
   * Get all approval requests visible to the user with their associated policies and resource details.
   */
  public static getApprovalRequestsApiV1PoliciesApprovalsGet<
    ThrowOnError extends boolean = false
  >(
    options?: Options<
      GetApprovalRequestsApiV1PoliciesApprovalsGetData,
      ThrowOnError
    >
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetApprovalRequestsApiV1PoliciesApprovalsGetResponses,
      GetApprovalRequestsApiV1PoliciesApprovalsGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetApprovalRequestsApiV1PoliciesApprovalsGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/policies/approvals',
      ...options
    })
  }

  /**
   * Check Resource Access Get
   */
  public static checkResourceAccessGetApiV1PoliciesResourcesCheckGet<
    ThrowOnError extends boolean = false
  >(
    options?: Options<
      CheckResourceAccessGetApiV1PoliciesResourcesCheckGetData,
      ThrowOnError
    >
  ) {
    return (options?.client ?? _heyApiClient).get<
      CheckResourceAccessGetApiV1PoliciesResourcesCheckGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      responseValidator: async (data) => {
        return await zCheckResourceAccessGetApiV1PoliciesResourcesCheckGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/policies/resources/check',
      ...options
    })
  }

  /**
   * Check Resource Access
   * Generic endpoint to check resource access.
   */
  public static checkResourceAccessApiV1PoliciesResourcesCheckPost<
    ThrowOnError extends boolean = false
  >(
    options?: Options<
      CheckResourceAccessApiV1PoliciesResourcesCheckPostData,
      ThrowOnError
    >
  ) {
    return (options?.client ?? _heyApiClient).post<
      CheckResourceAccessApiV1PoliciesResourcesCheckPostResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zCheckResourceAccessApiV1PoliciesResourcesCheckPostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/policies/resources/check',
      ...options
    })
  }

  /**
   * Check Resource For Approval
   * Checks the policy that is associated with a resource if it requires approval, if yes, this will create an approval request. If the policy indicates that
   * it does require approval, this will wait for the user to approve or reject the request before returning back the final
   * response and HTTP CODE. 200 = approved or didn't require approval, 403 = rejected by the user.
   */
  public static checkResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGet<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).get<
      CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetResponses,
      CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      url: '/api/v1/policies/resources/{resource_name}/approval',
      ...options
    })
  }

  /**
   * Get Policy
   */
  public static getPolicyApiV1PoliciesPolicyIdGet<
    ThrowOnError extends boolean = false
  >(options: Options<GetPolicyApiV1PoliciesPolicyIdGetData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetPolicyApiV1PoliciesPolicyIdGetResponses,
      GetPolicyApiV1PoliciesPolicyIdGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetPolicyApiV1PoliciesPolicyIdGetResponse.parseAsync(data)
      },
      url: '/api/v1/policies/{policy_id}',
      ...options
    })
  }

  /**
   * Update Policy
   */
  public static updatePolicyApiV1PoliciesPolicyIdPut<
    ThrowOnError extends boolean = false
  >(options: Options<UpdatePolicyApiV1PoliciesPolicyIdPutData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).put<
      UpdatePolicyApiV1PoliciesPolicyIdPutResponses,
      UpdatePolicyApiV1PoliciesPolicyIdPutErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zUpdatePolicyApiV1PoliciesPolicyIdPutResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/policies/{policy_id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Check Policy Status
   */
  public static checkPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostResponses,
      CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      url: '/api/v1/policies/{policy_id}/{audit_id}/status',
      ...options
    })
  }
}

export class ProvidersService {
  /**
   * List Providers
   */
  public static listProvidersApiV1ProvidersGet<
    ThrowOnError extends boolean = false
  >(options?: Options<ListProvidersApiV1ProvidersGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      ListProvidersApiV1ProvidersGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zListProvidersApiV1ProvidersGetResponse.parseAsync(data)
      },
      url: '/api/v1/providers/',
      ...options
    })
  }

  /**
   * Get Provider
   */
  public static getProviderApiV1ProvidersProviderIdGet<
    ThrowOnError extends boolean = false
  >(
    options: Options<GetProviderApiV1ProvidersProviderIdGetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetProviderApiV1ProvidersProviderIdGetResponses,
      GetProviderApiV1ProvidersProviderIdGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetProviderApiV1ProvidersProviderIdGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/providers/{provider_id}',
      ...options
    })
  }

  /**
   * Get Servers
   */
  public static getServersApiV1ProvidersProviderIdServersGet<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      GetServersApiV1ProvidersProviderIdServersGetData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).get<
      GetServersApiV1ProvidersProviderIdServersGetResponses,
      GetServersApiV1ProvidersProviderIdServersGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetServersApiV1ProvidersProviderIdServersGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/providers/{provider_id}/servers',
      ...options
    })
  }

  /**
   * Sync Provider
   */
  public static syncProviderApiV1ProvidersProviderIdSyncPost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      SyncProviderApiV1ProvidersProviderIdSyncPostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      SyncProviderApiV1ProvidersProviderIdSyncPostResponses,
      SyncProviderApiV1ProvidersProviderIdSyncPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      url: '/api/v1/providers/{provider_id}/sync',
      ...options
    })
  }
}

export class SdkService {
  /**
   * Initialize
   */
  public static initializeApiV1SdkInitializeGet<
    ThrowOnError extends boolean = false
  >(options?: Options<InitializeApiV1SdkInitializeGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      InitializeApiV1SdkInitializeGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zInitializeApiV1SdkInitializeGetResponse.parseAsync(data)
      },
      url: '/api/v1/sdk/initialize',
      ...options
    })
  }

  /**
   * Get Service Token
   * Returns the service token information for the authenticated user.
   */
  public static getServiceTokenApiV1SdkServiceTokenGet<
    ThrowOnError extends boolean = false
  >(
    options?: Options<GetServiceTokenApiV1SdkServiceTokenGetData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetServiceTokenApiV1SdkServiceTokenGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetServiceTokenApiV1SdkServiceTokenGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/sdk/service-token',
      ...options
    })
  }
}

export class SearchService {
  /**
   * Reindex
   * Reindexes all tools and toolprints for an organization.
   */
  public static reindexApiV1SearchReindexPost<
    ThrowOnError extends boolean = false
  >(options?: Options<ReindexApiV1SearchReindexPostData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).post<
      ReindexApiV1SearchReindexPostResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      url: '/api/v1/search/reindex',
      ...options
    })
  }

  /**
   * Reindex Toolprints
   * Reindexes all toolprints for an organization.
   */
  public static reindexToolprintsApiV1SearchReindexToolprintsPost<
    ThrowOnError extends boolean = false
  >(
    options?: Options<
      ReindexToolprintsApiV1SearchReindexToolprintsPostData,
      ThrowOnError
    >
  ) {
    return (options?.client ?? _heyApiClient).post<
      ReindexToolprintsApiV1SearchReindexToolprintsPostResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      url: '/api/v1/search/reindex/toolprints',
      ...options
    })
  }

  /**
   * Reindex Tools
   */
  public static reindexToolsApiV1SearchReindexToolsPost<
    ThrowOnError extends boolean = false
  >(
    options?: Options<ReindexToolsApiV1SearchReindexToolsPostData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).post<
      ReindexToolsApiV1SearchReindexToolsPostResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      url: '/api/v1/search/reindex/tools',
      ...options
    })
  }

  /**
   * Search Toolprints
   * Searches for the best set of toolprints that semantically match the query and returns them
   * along with a similarity score for each toolprint.
   */
  public static searchToolprintsApiV1SearchToolprintsPost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      SearchToolprintsApiV1SearchToolprintsPostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      SearchToolprintsApiV1SearchToolprintsPostResponses,
      SearchToolprintsApiV1SearchToolprintsPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zSearchToolprintsApiV1SearchToolprintsPostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/search/toolprints',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Get Toolprint Recommendation
   * Returns a single recommendation for a toolprint based on the goal that is trying to be achieved. It also
   * includes the set of prompts that should be injected into the message stack to prime the agent's LLM.
   *
   * Args:
   * request_context: The authenticated request context
   * toolprint_index: The toolprint index manager to search with
   * search_request: The search request containing the goal query
   *
   * Returns:
   * A ToolprintRecommendation containing the best matching toolprint and associated prompts
   */
  public static getToolprintRecommendationApiV1SearchToolprintsRecommendationPost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostResponses,
      GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetToolprintRecommendationApiV1SearchToolprintsRecommendationPostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/search/toolprints/recommendation',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Search Tools
   * Searches for the best set of tools that semantically match the query and returns them
   * along with a similarity score for each tool.
   */
  public static searchToolsApiV1SearchToolsPost<
    ThrowOnError extends boolean = false
  >(options: Options<SearchToolsApiV1SearchToolsPostData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      SearchToolsApiV1SearchToolsPostResponses,
      SearchToolsApiV1SearchToolsPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zSearchToolsApiV1SearchToolsPostResponse.parseAsync(data)
      },
      url: '/api/v1/search/tools',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class SecretsService {
  /**
   * Get Secrets
   */
  public static getSecretsApiV1SecretsGet<ThrowOnError extends boolean = false>(
    options?: Options<GetSecretsApiV1SecretsGetData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetSecretsApiV1SecretsGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      url: '/api/v1/secrets/',
      ...options
    })
  }

  /**
   * Get Secret
   */
  public static getSecretApiV1SecretsSecretNameGet<
    ThrowOnError extends boolean = false
  >(options: Options<GetSecretApiV1SecretsSecretNameGetData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetSecretApiV1SecretsSecretNameGetResponses,
      GetSecretApiV1SecretsSecretNameGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetSecretApiV1SecretsSecretNameGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/secrets/{secret_name}',
      ...options
    })
  }

  /**
   * Upsert Secret
   */
  public static upsertSecretApiV1SecretsSecretNamePut<
    ThrowOnError extends boolean = false
  >(options: Options<UpsertSecretApiV1SecretsSecretNamePutData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).put<
      UpsertSecretApiV1SecretsSecretNamePutResponses,
      UpsertSecretApiV1SecretsSecretNamePutErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        },
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseValidator: async (data) => {
        return await zUpsertSecretApiV1SecretsSecretNamePutResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/secrets/{secret_name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class ServersService {
  /**
   * List Servers
   */
  public static listServersApiV1ServersGet<
    ThrowOnError extends boolean = false
  >(options?: Options<ListServersApiV1ServersGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      ListServersApiV1ServersGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zListServersApiV1ServersGetResponse.parseAsync(data)
      },
      url: '/api/v1/servers/',
      ...options
    })
  }

  /**
   * Get Server
   */
  public static getServerApiV1ServersServerIdGet<
    ThrowOnError extends boolean = false
  >(options: Options<GetServerApiV1ServersServerIdGetData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetServerApiV1ServersServerIdGetResponses,
      GetServerApiV1ServersServerIdGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetServerApiV1ServersServerIdGetResponse.parseAsync(data)
      },
      url: '/api/v1/servers/{server_id}',
      ...options
    })
  }

  /**
   * Get Server Client
   */
  public static getServerClientApiV1ServersServerIdClientGet<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      GetServerClientApiV1ServersServerIdClientGetData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).get<
      GetServerClientApiV1ServersServerIdClientGetResponses,
      GetServerClientApiV1ServersServerIdClientGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetServerClientApiV1ServersServerIdClientGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/servers/{server_id}/client',
      ...options
    })
  }

  /**
   * Get Server Properties
   */
  public static getServerPropertiesApiV1ServersServerIdPropertiesGet<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      GetServerPropertiesApiV1ServersServerIdPropertiesGetData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).get<
      GetServerPropertiesApiV1ServersServerIdPropertiesGetResponses,
      GetServerPropertiesApiV1ServersServerIdPropertiesGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetServerPropertiesApiV1ServersServerIdPropertiesGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/servers/{server_id}/properties',
      ...options
    })
  }

  /**
   * Patch Server Properties
   */
  public static patchServerPropertiesApiV1ServersServerIdPropertiesKeyPatch<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).patch<
      PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchResponses,
      PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zPatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/servers/{server_id}/properties/{key}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class StrategyService {
  /**
   * Get Strategy
   * Gets a strategy for a given goal.
   */
  public static getStrategyApiV1StrategyPost<
    ThrowOnError extends boolean = false
  >(options: Options<GetStrategyApiV1StrategyPostData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      GetStrategyApiV1StrategyPostResponses,
      GetStrategyApiV1StrategyPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetStrategyApiV1StrategyPostResponse.parseAsync(data)
      },
      url: '/api/v1/strategy/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Create Fake Recipes
   * Creates fake strategies for testing purposes.
   */
  public static createFakeRecipesApiV1StrategyFakePost<
    ThrowOnError extends boolean = false
  >(
    options?: Options<CreateFakeRecipesApiV1StrategyFakePostData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).post<
      CreateFakeRecipesApiV1StrategyFakePostResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zCreateFakeRecipesApiV1StrategyFakePostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/strategy/fake',
      ...options
    })
  }
}

export class ToolprintsService {
  /**
   * Create Toolprint
   * Creates a new toolprint and indexes it for search.
   *
   * The process:
   * 1. Validates the toolprint definition
   * 2. Creates and persists the toolprint
   * 3. Indexes the toolprint for semantic search
   */
  public static createToolprintApiV1ToolprintsPost<
    ThrowOnError extends boolean = false
  >(options: Options<CreateToolprintApiV1ToolprintsPostData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      CreateToolprintApiV1ToolprintsPostResponses,
      CreateToolprintApiV1ToolprintsPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zCreateToolprintApiV1ToolprintsPostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/toolprints/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Get Toolprint Instructions
   * Returns the complete toolprint documentation including example in markdown format.
   */
  public static getToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGet<
    ThrowOnError extends boolean = false
  >(
    options?: Options<
      GetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetData,
      ThrowOnError
    >
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'text',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/toolprints/.well-known/ai.txt',
      ...options
    })
  }

  /**
   * Get Toolprint Schema
   * Returns the schema for toolprint definitions.
   */
  public static getToolprintSchemaApiV1ToolprintsWellKnownSchemaGet<
    ThrowOnError extends boolean = false
  >(
    options?: Options<
      GetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetData,
      ThrowOnError
    >
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/toolprints/.well-known/schema',
      ...options
    })
  }

  /**
   * Get Toolprint Template
   * Returns a template for toolprint definitions in YAML format.
   */
  public static getToolprintTemplateApiV1ToolprintsWellKnownTemplateGet<
    ThrowOnError extends boolean = false
  >(
    options?: Options<
      GetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetData,
      ThrowOnError
    >
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'text',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/toolprints/.well-known/template',
      ...options
    })
  }

  /**
   * Create Toolprint Json
   * Creates a new toolprint from JSON content and indexes it for search.
   *
   * The process:
   * 1. Validates the JSON content
   * 2. Creates and persists the toolprint
   * 3. Indexes the toolprint for semantic search
   */
  public static createToolprintJsonApiV1ToolprintsJsonPost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      CreateToolprintJsonApiV1ToolprintsJsonPostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateToolprintJsonApiV1ToolprintsJsonPostResponses,
      CreateToolprintJsonApiV1ToolprintsJsonPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zCreateToolprintJsonApiV1ToolprintsJsonPostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/toolprints/json',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Validate Toolprint
   * Validates a toolprint definition without persisting it.
   *
   * This endpoint checks:
   * 1. The basic structure and required fields of the toolprint
   * 2. That all referenced tools exist and are accessible to the user
   * 3. That the toolprint definition meets any additional business rules
   */
  public static validateToolprintApiV1ToolprintsValidatePost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      ValidateToolprintApiV1ToolprintsValidatePostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      ValidateToolprintApiV1ToolprintsValidatePostResponses,
      ValidateToolprintApiV1ToolprintsValidatePostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zValidateToolprintApiV1ToolprintsValidatePostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/toolprints/validate',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Validate Toolprint Json
   * Validates a toolprint definition in JSON format without persisting it.
   *
   * This endpoint accepts JSON content and:
   * 1. Validates the JSON can be converted to a Toolprint model
   * 2. Validates the basic structure and required fields
   * 3. Checks that all referenced tools exist and are accessible
   * 4. Verifies the toolprint definition meets business rules
   */
  public static validateToolprintJsonApiV1ToolprintsValidateJsonPost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      ValidateToolprintJsonApiV1ToolprintsValidateJsonPostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      ValidateToolprintJsonApiV1ToolprintsValidateJsonPostResponses,
      ValidateToolprintJsonApiV1ToolprintsValidateJsonPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      url: '/api/v1/toolprints/validate/json',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Validate Toolprint Yaml
   * Validates a toolprint definition in YAML format without persisting it.
   *
   * This endpoint accepts YAML content and:
   * 1. Parses the YAML into a Toolprint model
   * 2. Validates the basic structure and required fields
   * 3. Checks that all referenced tools exist and are accessible
   * 4. Verifies the toolprint definition meets business rules
   */
  public static validateToolprintYamlApiV1ToolprintsValidateYamlPost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      ValidateToolprintYamlApiV1ToolprintsValidateYamlPostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      ValidateToolprintYamlApiV1ToolprintsValidateYamlPostResponses,
      ValidateToolprintYamlApiV1ToolprintsValidateYamlPostErrors,
      ThrowOnError
    >({
      bodySerializer: null,
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zValidateToolprintYamlApiV1ToolprintsValidateYamlPostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/toolprints/validate/yaml',
      ...options,
      headers: {
        'Content-Type': 'text/plain',
        ...options.headers
      }
    })
  }

  /**
   * Create Toolprint Yaml
   * Creates a new toolprint from YAML content and indexes it for search.
   *
   * The process:
   * 1. Parses and validates the YAML content
   * 2. Creates and persists the toolprint
   * 3. Indexes the toolprint for semantic search
   */
  public static createToolprintYamlApiV1ToolprintsYamlPost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      CreateToolprintYamlApiV1ToolprintsYamlPostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateToolprintYamlApiV1ToolprintsYamlPostResponses,
      CreateToolprintYamlApiV1ToolprintsYamlPostErrors,
      ThrowOnError
    >({
      bodySerializer: null,
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zCreateToolprintYamlApiV1ToolprintsYamlPostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/toolprints/yaml',
      ...options,
      headers: {
        'Content-Type': 'text/plain',
        ...options.headers
      }
    })
  }

  /**
   * Get Toolprint
   * Gets a specific toolprint by its ID.
   */
  public static getToolprintApiV1ToolprintsToolprintIdGet<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      GetToolprintApiV1ToolprintsToolprintIdGetData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).get<
      GetToolprintApiV1ToolprintsToolprintIdGetResponses,
      GetToolprintApiV1ToolprintsToolprintIdGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetToolprintApiV1ToolprintsToolprintIdGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/toolprints/{toolprint_id}',
      ...options
    })
  }
}

export class ToolsService {
  /**
   * List Tools
   * List all tools for the current user.
   */
  public static listToolsApiV1ToolsGet<ThrowOnError extends boolean = false>(
    options?: Options<ListToolsApiV1ToolsGetData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListToolsApiV1ToolsGetResponses,
      unknown,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zListToolsApiV1ToolsGetResponse.parseAsync(data)
      },
      url: '/api/v1/tools/',
      ...options
    })
  }

  /**
   * Get Tool Resources Batch
   * Returns hydrated tool resources for the specified tool IDs in an efficient batch operation.
   */
  public static getToolResourcesBatchApiV1ToolsResourcesBatchPost<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      GetToolResourcesBatchApiV1ToolsResourcesBatchPostData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).post<
      GetToolResourcesBatchApiV1ToolsResourcesBatchPostResponses,
      GetToolResourcesBatchApiV1ToolsResourcesBatchPostErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetToolResourcesBatchApiV1ToolsResourcesBatchPostResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/tools/resources/batch',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Get Tool
   */
  public static getToolApiV1ToolsToolIdGet<
    ThrowOnError extends boolean = false
  >(options: Options<GetToolApiV1ToolsToolIdGetData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetToolApiV1ToolsToolIdGetResponses,
      GetToolApiV1ToolsToolIdGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetToolApiV1ToolsToolIdGetResponse.parseAsync(data)
      },
      url: '/api/v1/tools/{tool_id}',
      ...options
    })
  }

  /**
   * Get Tool Properties
   */
  public static getToolPropertiesApiV1ToolsToolIdPropertiesGet<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      GetToolPropertiesApiV1ToolsToolIdPropertiesGetData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).get<
      GetToolPropertiesApiV1ToolsToolIdPropertiesGetResponses,
      GetToolPropertiesApiV1ToolsToolIdPropertiesGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetToolPropertiesApiV1ToolsToolIdPropertiesGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/tools/{tool_id}/properties',
      ...options
    })
  }

  /**
   * Get Tool Resource
   * Returns the hydrated details for a tool given the current user and profile.
   */
  public static getToolResourceApiV1ToolsToolIdResourceGet<
    ThrowOnError extends boolean = false
  >(
    options: Options<
      GetToolResourceApiV1ToolsToolIdResourceGetData,
      ThrowOnError
    >
  ) {
    return (options.client ?? _heyApiClient).get<
      GetToolResourceApiV1ToolsToolIdResourceGetResponses,
      GetToolResourceApiV1ToolsToolIdResourceGetErrors,
      ThrowOnError
    >({
      responseType: 'json',
      security: [
        {
          name: 'X-ONEGREP-API-KEY',
          type: 'apiKey'
        }
      ],
      responseValidator: async (data) => {
        return await zGetToolResourceApiV1ToolsToolIdResourceGetResponse.parseAsync(
          data
        )
      },
      url: '/api/v1/tools/{tool_id}/resource',
      ...options
    })
  }
}
