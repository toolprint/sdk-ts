// This file is auto-generated by @hey-api/openapi-ts

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>
  /**
   * Message
   */
  msg: string
  /**
   * Error Type
   */
  type: string
}

/**
 * UserAccount
 * Model for storing user information including their API key
 */
export type UserAccount = {
  /**
   * Api Key
   */
  api_key: string
  /**
   * Belongs To Organization Id
   */
  belongs_to_organization_id?: string | null
  /**
   * Created At
   */
  created_at?: string | null
  /**
   * Doppler Service Token Id
   */
  doppler_service_token_id?: string | null
  /**
   * Id
   */
  id: string
  /**
   * Updated At
   */
  updated_at?: string | null
}

/**
 * UpsertSecretResponse
 */
export type UpsertSecretResponse = {
  /**
   * Secret Name
   */
  secret_name: string
  /**
   * Success
   */
  success: boolean
}

/**
 * UpsertSecretRequest
 */
export type UpsertSecretRequest = {
  /**
   * Value
   */
  value:
    | string
    | {
        [key: string]: unknown
      }
  /**
   * Value Type
   */
  value_type: 'string' | 'object'
}

/**
 * ToolprintToolReference
 * A reference to a tool that is used in a toolprint. This reference can link to a tool directly by a unique identifier or indirectly through
 * a link to the tool server as well as the name of the tool. The latter reference is experimental and relies on the implementor
 * to ensure that the reference is correctly followed.
 */
export type ToolprintToolReference = {
  /**
   * Id
   * An optional reference id
   */
  id?: string | null
  /**
   * Name
   * The name of the tool. If the tool exists within this server or integration, this value will be used to link to it.
   */
  name: string
  /**
   * Ref Type
   * The type of reference to the tool. If the tool exists within this server or integration, this value will be used to link to it.
   */
  ref_type?: ('local' | 'id') | null
}

/**
 * ToolprintTool
 * A definition of how a specific tool should be used within a toolprint.
 * This is a simplified model that focuses on the conceptual structure and specifically
 * avoids referential fields to any persisted entities.
 *
 * This tool reference is limited to the server or integration in which the toolprint was defined.
 */
export type ToolprintTool = {
  /**
   * A reference to a tool that is used in this toolprint. This reference can link to a tool directly by a unique identifier or indirectly througha link to the tool server as well as the name of the tool. The latter reference is experimental and relies on the implementorto ensure that the reference is correctly followed.
   */
  ref: ToolprintToolReference
  /**
   * Usage Hints
   * A more in-depth description of this tool and what it should be used for in the context of this recipe.
   */
  usage_hints?: string | null
}

/**
 * ToolprintRecommendation
 * A recommendation for a toolprint based on a goal.
 */
export type ToolprintRecommendationReadable = {
  /**
   * Meta fields for the toolprint recommendation.
   */
  meta: SearchResultMeta
  /**
   * Prompts
   * The prompts that should be injected into the message stack to prime the agent's LLM.
   */
  prompts: Array<Prompt>
  /**
   * The toolprint that is recommended.
   */
  toolprint: RegisteredToolprintReadable
}

/**
 * ToolprintRecommendation
 * A recommendation for a toolprint based on a goal.
 */
export type ToolprintRecommendationWritable = {
  /**
   * Meta fields for the toolprint recommendation.
   */
  meta: SearchResultMeta
  /**
   * Prompts
   * The prompts that should be injected into the message stack to prime the agent's LLM.
   */
  prompts: Array<Prompt>
  /**
   * The toolprint that is recommended.
   */
  toolprint: RegisteredToolprintWritable
}

/**
 * RegisteredToolprint
 * A toolprint.
 */
export type RegisteredToolprintReadable = {
  /**
   * Created At
   */
  created_at?: string | null
  /**
   * Created By
   */
  created_by?: string
  /**
   * Id
   */
  id?: string
  /**
   * Owner Id
   */
  owner_id?: string | null
  /**
   * Source
   */
  source?: {
    [key: string]: unknown
  }
  /**
   * Source Checksum
   * The checksum of the source toolprint. This helps us track changes from the original vending server/integration.
   */
  source_checksum: string
  /**
   * Useful field for converting our persisted toolprint into a raw toolprint definition for dissemination.
   */
  toolprint: ToolprintOutput
  /**
   * Tools
   */
  readonly tools: Array<Tool>
  /**
   * Updated At
   */
  updated_at?: string | null
  /**
   * Updated By
   */
  updated_by?: string | null
}

/**
 * RegisteredToolprint
 * A toolprint.
 */
export type RegisteredToolprintWritable = {
  /**
   * Created At
   */
  created_at?: string | null
  /**
   * Created By
   */
  created_by?: string
  /**
   * Id
   */
  id?: string
  /**
   * Owner Id
   */
  owner_id?: string | null
  /**
   * Source
   */
  source?: {
    [key: string]: unknown
  }
  /**
   * Source Checksum
   * The checksum of the source toolprint. This helps us track changes from the original vending server/integration.
   */
  source_checksum: string
  /**
   * Useful field for converting our persisted toolprint into a raw toolprint definition for dissemination.
   */
  toolprint: ToolprintOutput
  /**
   * Updated At
   */
  updated_at?: string | null
  /**
   * Updated By
   */
  updated_by?: string | null
}

/**
 * Tool
 * A tool.
 */
export type Tool = {
  /**
   * Description
   * A description of the tool.
   */
  description?: string | null
  /**
   * Icon Url
   * A URL to an icon for the tool.
   */
  icon_url?: string | null
  /**
   * Id
   */
  id: string
  /**
   * Input Schema
   * A JSON schema for the tool's input (defaults to 'always valid').
   */
  input_schema?:
    | {
        [key: string]: unknown
      }
    | boolean
  /**
   * Name
   * The name of the tool (should be unique within a server).
   */
  name: string
  /**
   * Server Id
   */
  server_id: string
}

/**
 * Toolprint
 * A declarative definition of a toolprint that describes how tools should be used together
 * to achieve a goal. This is a simplified model that focuses on the conceptual structure and specifically
 * avoids referential fields to any persisted entities.
 */
export type ToolprintOutput = {
  /**
   * Goal
   * The goal that this recipe is helping an agent achieve.
   */
  goal: string
  /**
   * Instructions
   * The instructions on how this recipe should be used.
   */
  instructions: string | null
  /**
   * Meta fields for the toolprint.
   */
  meta: ToolprintMetaOutput
  /**
   * Tools
   * Definitions for how each tool should be used in this toolprint.
   */
  tools: Array<ToolprintTool>
}

/**
 * ToolprintMeta
 * A set of meta fields that are common to all toolprints.
 */
export type ToolprintMetaOutput = {
  /**
   * Language
   * The language of the toolprint.
   */
  language?: 'en-US'
  /**
   * Name
   * The name of the toolprint.
   */
  name: string
  /**
   * Resource Id
   * The unique identifier for the toolprint.
   */
  resource_id?: string | null
  /**
   * Version
   * The version of the toolprint definition.
   */
  version?: string
}

/**
 * Prompt
 * A prompt for an LLM.
 */
export type Prompt = {
  /**
   * Message
   */
  message: string
  /**
   * Type
   */
  type: 'system' | 'user'
}

/**
 * SearchResultMeta
 * Metadata about a search result. All search result types should inherit from this model.
 */
export type SearchResultMeta = {
  /**
   * Score
   * The score of the search result.
   */
  score: number
}

/**
 * ToolprintMeta
 * A set of meta fields that are common to all toolprints.
 */
export type ToolprintMetaInput = {
  /**
   * Language
   * The language of the toolprint.
   */
  language?: 'en-US'
  /**
   * Name
   * The name of the toolprint.
   */
  name: string
  /**
   * Resource Id
   * The unique identifier for the toolprint.
   */
  resource_id?: string | null
  /**
   * Version
   * The version of the toolprint definition.
   */
  version?: string
}

/**
 * Toolprint
 * A declarative definition of a toolprint that describes how tools should be used together
 * to achieve a goal. This is a simplified model that focuses on the conceptual structure and specifically
 * avoids referential fields to any persisted entities.
 */
export type ToolprintInput = {
  /**
   * Goal
   * The goal that this recipe is helping an agent achieve.
   */
  goal: string
  /**
   * Instructions
   * The instructions on how this recipe should be used.
   */
  instructions: string | null
  /**
   * Meta fields for the toolprint.
   */
  meta: ToolprintMetaInput
  /**
   * Tools
   * Definitions for how each tool should be used in this toolprint.
   */
  tools: Array<ToolprintTool>
}

/**
 * ToolServerProvider
 */
export type ToolServerProvider = {
  /**
   * Id
   */
  id: string
  /**
   * Name
   */
  name: string
}

/**
 * ToolServerProperties
 * Properties for a tool server.
 */
export type ToolServerProperties = {
  /**
   * Properties
   */
  properties: {
    [key: string]: unknown
  }
}

/**
 * ToolServerLaunchConfig
 * The launch config for a tool server.
 */
export type ToolServerLaunchConfig = {
  /**
   * Secret Name
   */
  secret_name: string
  /**
   * Source
   */
  source: 'doppler'
}

/**
 * ToolServer
 */
export type ToolServer = {
  /**
   * Id
   */
  id: string
  /**
   * Name
   */
  name: string
  /**
   * Properties
   */
  properties?: {
    [key: string]: unknown
  }
  /**
   * Provider Id
   */
  provider_id: string
}

/**
 * ToolResource
 * A broad summary of details about a tool akin to a ToolResource.
 */
export type ToolResource = {
  canonical_resource: CanonicalResource
  /**
   * Description
   */
  description?: string | null
  /**
   * Id
   */
  id: string
  /**
   * Integration Name
   */
  integration_name: string
  /**
   * Org Id
   */
  org_id: string
  policy: PolicyBase
  /**
   * Profile Id
   */
  profile_id: string
  properties: ToolProperties
  provider: ToolServerProvider
  server: ToolServer
  tool: Tool
  /**
   * Tool Name
   */
  tool_name: string
}

/**
 * ToolProperties
 * Properties for a tool.
 */
export type ToolProperties = {
  /**
   * Tags
   */
  tags: {
    [key: string]: unknown
  }
}

/**
 * PolicyBase
 * Base model with shared policy fields
 */
export type PolicyBase = {
  access_policy: AccessPolicyType
  /**
   * Canonical Resource Name
   */
  canonical_resource_name: string
  /**
   * Description
   */
  description?: string | null
  /**
   * Event Name
   */
  event_name: string
  /**
   * Organization Id
   */
  organization_id?: string | null
}

/**
 * AccessPolicyType
 * Enum for access policy types
 */
export type AccessPolicyType = 'ALWAYS' | 'NEVER' | 'REQUIRES_PERMISSION'

/**
 * AccessPolicyType
 * Enum for access policy types
 */
export const AccessPolicyType = {
  ALWAYS: 'ALWAYS',
  NEVER: 'NEVER',
  REQUIRES_PERMISSION: 'REQUIRES_PERMISSION'
} as const

/**
 * CanonicalResource
 * Represents a canonical resource name in object form.
 */
export type CanonicalResource = {
  /**
   * Event Name
   */
  event_name: string
  /**
   * Org Id
   */
  org_id: string
  /**
   * Profile Id
   */
  profile_id: string
  /**
   * Server Name
   */
  server_name: string
}

/**
 * ToolCustomTagsParamsRequest
 * Params to change the tags for a tool in an integration. Will upsert any tags that already
 * exist. Will not delete any other tags. This is only net additive.
 */
export type ToolCustomTagsParamsRequest = {
  /**
   * Description
   */
  description?: string | null
  /**
   * Integration Name
   */
  integration_name: string
  /**
   * Tags
   */
  tags: {
    [key: string]: unknown
  }
  /**
   * Tool Name
   */
  tool_name: string
}

/**
 * ToolCustomTagSelectionParamsRequest
 * Params that generalize the selection the tags for a tool in an integration.
 */
export type ToolCustomTagSelectionParamsRequest = {
  /**
   * Description
   */
  description?: string | null
  /**
   * Integration Name
   */
  integration_name: string
  /**
   * Tags
   */
  tags: Array<string>
  /**
   * Tool Name
   */
  tool_name: string
}

/**
 * Strategy
 * A model representing a result for a goal-based search.
 */
export type Strategy = {
  /**
   * Instructions
   * Instructions to follow the strategy.
   */
  instructions: string
  /**
   * Recipe Id
   * The ID of the recipe that was used to generate the strategy.
   */
  recipe_id: string
  /**
   * Tools
   * List of one or more fully-hydrated tool resources that should be used in the strategy to achieve the goal.
   */
  tools: Array<ToolResource>
}

/**
 * SmitheryToolServerClient
 * A client for a tool server that is a smithery server.
 */
export type SmitheryToolServerClient = {
  /**
   * Client Type
   */
  client_type: 'smithery'
  /**
   * Connections
   */
  connections: Array<SmitheryConnectionInfo>
  launch_config?: ToolServerLaunchConfig | null
  /**
   * Server Id
   */
  server_id: string
}

/**
 * SmitheryConnectionInfo
 */
export type SmitheryConnectionInfo = {
  /**
   * Config Schema
   */
  config_schema?:
    | {
        [key: string]: unknown
      }
    | boolean
  /**
   * Deployment Url
   */
  deployment_url?: string
  /**
   * Type
   */
  type: 'ws' | 'http'
}

/**
 * ServiceTokenResponse
 * Response including the service token for the SDK to use.
 */
export type ServiceTokenResponse = {
  /**
   * Doppler Config
   */
  doppler_config?: string | null
  /**
   * Doppler Env
   */
  doppler_env?: string | null
  /**
   * Doppler Project
   */
  doppler_project?: string | null
  /**
   * Doppler Service Token
   */
  doppler_service_token?: string | null
}

/**
 * SearchResponse[ScoredItem[Tool]]
 */
export type SearchResponseScoredItemTool = {
  pagination: PaginationMetadata
  /**
   * Results
   */
  results: Array<ScoredItemTool>
}

/**
 * ScoredItem[Tool]
 */
export type ScoredItemTool = {
  /**
   * The item that was scored.
   */
  item: Tool
  /**
   * Score
   * The score of the item [0, 1].
   */
  score: number
}

/**
 * PaginationMetadata
 * Metadata for paginated results
 */
export type PaginationMetadata = {
  /**
   * Has Next
   */
  has_next: boolean
  /**
   * Has Prev
   */
  has_prev: boolean
  /**
   * Page
   */
  page: number
  /**
   * Page Size
   */
  page_size: number
  /**
   * Pages
   */
  pages: number
  /**
   * Total
   */
  total: number
}

/**
 * SearchResponse[ScoredItem[RegisteredToolprint]]
 */
export type SearchResponseScoredItemRegisteredToolprintReadable = {
  pagination: PaginationMetadata
  /**
   * Results
   */
  results: Array<ScoredItemRegisteredToolprintReadable>
}

/**
 * SearchResponse[ScoredItem[RegisteredToolprint]]
 */
export type SearchResponseScoredItemRegisteredToolprintWritable = {
  pagination: PaginationMetadata
  /**
   * Results
   */
  results: Array<ScoredItemRegisteredToolprintWritable>
}

/**
 * ScoredItem[RegisteredToolprint]
 */
export type ScoredItemRegisteredToolprintReadable = {
  /**
   * The item that was scored.
   */
  item: RegisteredToolprintReadable
  /**
   * Score
   * The score of the item [0, 1].
   */
  score: number
}

/**
 * ScoredItem[RegisteredToolprint]
 */
export type ScoredItemRegisteredToolprintWritable = {
  /**
   * The item that was scored.
   */
  item: RegisteredToolprintWritable
  /**
   * Score
   * The score of the item [0, 1].
   */
  score: number
}

/**
 * SearchRequest
 * A request for a search.
 */
export type SearchRequest = {
  /**
   * K
   * The number of results to return from index.
   */
  k?: number
  /**
   * Min Score
   * The minimum score to return from index.
   */
  min_score?: number
  /**
   * Page
   * The page number to return.
   */
  page?: number
  /**
   * Page Size
   * The number of results per page.
   */
  page_size?: number
  /**
   * Query
   * The query used against the search index.
   */
  query: string
}

/**
 * Recipe
 * A recipe.
 */
export type RecipeReadable = {
  /**
   * Created At
   */
  created_at?: string | null
  /**
   * Goal
   * The goal that this recipe is helping an agent achieve.
   */
  goal: string
  /**
   * Id
   */
  id?: string
  /**
   * Instructions
   * The instructions for this recipe.
   */
  instructions: string | null
  /**
   * Tools
   */
  readonly tools: Array<Tool>
  /**
   * Updated At
   */
  updated_at?: string | null
}

/**
 * Recipe
 * A recipe.
 */
export type RecipeWritable = {
  /**
   * Created At
   */
  created_at?: string | null
  /**
   * Goal
   * The goal that this recipe is helping an agent achieve.
   */
  goal: string
  /**
   * Id
   */
  id?: string
  /**
   * Instructions
   * The instructions for this recipe.
   */
  instructions: string | null
  /**
   * Updated At
   */
  updated_at?: string | null
}

/**
 * PolicyCheckResult
 * Result of a policy check
 */
export type PolicyCheckResult = {
  /**
   * Approved
   */
  approved: boolean
}

/**
 * PolicyAccessRule
 * Policy template that is used to create a policy.
 */
export type PolicyAccessRule = {
  access_policy: AccessPolicyType
  /**
   * Description
   */
  description?: string | null
  /**
   * Event Name
   */
  event_name: string
}

/**
 * Policy
 * Policy model that works with both SQL and in-memory storage
 */
export type Policy = {
  access_policy: AccessPolicyType
  /**
   * Canonical Resource Name
   */
  canonical_resource_name: string
  /**
   * Created At
   */
  created_at?: string | null
  /**
   * Description
   */
  description?: string | null
  /**
   * Event Name
   */
  event_name: string
  /**
   * Id
   */
  id?: string
  /**
   * Organization Id
   */
  organization_id?: string | null
  /**
   * Updated At
   */
  updated_at?: string | null
}

/**
 * PaginatedResponse[AuditLog]
 */
export type PaginatedResponseAuditLog = {
  /**
   * Items
   */
  items: Array<AuditLog>
  pagination: PaginationMetadata
}

/**
 * AuditLog
 * Model for audit logging
 */
export type AuditLog = {
  /**
   * Action
   */
  action: string
  /**
   * Details
   */
  details?: {
    [key: string]: unknown
  }
  /**
   * Id
   */
  id?: number | null
  /**
   * Performed By
   */
  performed_by?: string
  /**
   * Policy Id
   */
  policy_id: string
  /**
   * Timestamp
   */
  timestamp?: string
}

/**
 * Organization
 */
export type Organization = {
  /**
   * Created At
   */
  created_at?: string | null
  /**
   * Created By User Id
   */
  created_by_user_id?: string | null
  /**
   * Id
   */
  id: string
  /**
   * Open Invitation Code
   */
  open_invitation_code?: string | null
  /**
   * Owner Id
   */
  owner_id?: string | null
  /**
   * Updated At
   */
  updated_at?: string | null
}

/**
 * NewPolicyRequest
 * Model to create a new policy. Other policy fields are derived from the default policy for the
 * integration/event
 */
export type NewPolicyRequest = {
  access_policy: AccessPolicyType
  /**
   * Event Name
   */
  event_name: string
  /**
   * Integration Name
   */
  integration_name: string
}

/**
 * MultipleToolCustomTagsParamsRequest
 * Params to change the tags for multiple tools in an integration.
 */
export type MultipleToolCustomTagsParamsRequest = {
  /**
   * Tags
   */
  tags: {
    [key: string]: unknown
  }
  /**
   * Tool Names
   */
  tool_names: Array<string>
}

/**
 * MultiIdPostBody
 * A multi-id post body.
 */
export type MultiIdPostBody = {
  /**
   * Ids
   */
  ids: Array<string> | Array<string>
}

/**
 * MCPToolServerClient
 * A client for a tool server that is a direct MCP server connection.
 */
export type McpToolServerClient = {
  /**
   * Client Type
   */
  client_type: 'mcp'
  /**
   * Server Id
   */
  server_id: string
  /**
   * Transport Type
   */
  transport_type: 'sse' | 'websocket'
  /**
   * Url
   */
  url: string
}

/**
 * MCPIntegrationArgs
 * Arguments specifically for an integration that is powered by an MCP server.
 */
export type McpIntegrationArgs = {
  /**
   * Args
   */
  args?: Array<string> | null
  /**
   * Command
   */
  command: string
  /**
   * Type
   */
  type: 'mcp'
}

/**
 * IntegrationTemplate
 * Class representation of the server templates that we support. This matches the structure
 * of server templates under resources/integrations/templates*
 */
export type IntegrationTemplate = {
  /**
   * Args
   */
  args: {
    type: 'mcp'
  } & McpIntegrationArgs
  auth_scheme?: IntegrationAuthScheme | null
  default_policies: IntegrationDefaultPolicies
  /**
   * Name
   */
  name: string
  oauth_authorizer?: IntegrationOAuthAuthorizer | null
  /**
   * Repository
   */
  repository: string
  /**
   * Secrets
   */
  secrets?: Array<IntegrationSecret> | null
  /**
   * Sha
   */
  sha: string
  /**
   * Version
   * The version of the integration template.
   */
  version: string
}

/**
 * IntegrationSecret
 * Represents a secret required by a server template.
 */
export type IntegrationSecret = {
  /**
   * Generation Link
   */
  generation_link?: string | null
  /**
   * Name
   */
  name: string
  /**
   * Value
   */
  value?: string | null
}

/**
 * IntegrationOAuthAuthorizer
 */
export type IntegrationOAuthAuthorizer = 'google' | 'meta'

/**
 * IntegrationOAuthAuthorizer
 */
export const IntegrationOAuthAuthorizer = {
  GOOGLE: 'google',
  META: 'meta'
} as const

/**
 * IntegrationDefaultPolicies
 * Default policies for an integration.
 */
export type IntegrationDefaultPolicies = {
  /**
   * Tools
   * Policies for tools in this integration.
   */
  tools: Array<PolicyAccessRule>
}

/**
 * IntegrationAuthScheme
 * Authentication schemes supported by server templates.
 */
export type IntegrationAuthScheme = 'token' | 'oauth_1_0' | 'oauth_2_0'

/**
 * IntegrationAuthScheme
 * Authentication schemes supported by server templates.
 */
export const IntegrationAuthScheme = {
  TOKEN: 'token',
  OAUTH_1_0: 'oauth_1_0',
  OAUTH_2_0: 'oauth_2_0'
} as const

/**
 * IntegrationConfigurationState
 * The state of an integration from an account perspective (not runtime).
 * To determine the runtime state, we will have to check the server configuration for
 * the integration separately depending on our infrastucture selection.
 */
export type IntegrationConfigurationState =
  | 'agent_local'
  | 'cloud_hosted_available'
  | 'cloud_hosted_configured'

/**
 * IntegrationConfigurationState
 * The state of an integration from an account perspective (not runtime).
 * To determine the runtime state, we will have to check the server configuration for
 * the integration separately depending on our infrastucture selection.
 */
export const IntegrationConfigurationState = {
  AGENT_LOCAL: 'agent_local',
  CLOUD_HOSTED_AVAILABLE: 'cloud_hosted_available',
  CLOUD_HOSTED_CONFIGURED: 'cloud_hosted_configured'
} as const

/**
 * IntegrationConfigDetails
 * General details about an integration. Meant to be surfaceable to a client.
 */
export type IntegrationConfigDetails = {
  configuration_state: IntegrationConfigurationState
  /**
   * Name
   */
  name: string
  template: IntegrationTemplate
}

/**
 * InitializeResponse
 * Response for the SDK to initialize.
 */
export type InitializeResponse = {
  /**
   * Clients
   */
  clients: Array<
    | ({
        client_type: 'mcp'
      } & McpToolServerClient)
    | ({
        client_type: 'blaxel'
      } & BlaxelToolServerClient)
    | ({
        client_type: 'smithery'
      } & SmitheryToolServerClient)
    | ({
        client_type: 'composio'
      } & ComposioToolServerClient)
  >
  /**
   * Doppler Config
   */
  doppler_config?: string | null
  /**
   * Doppler Env
   */
  doppler_env?: string | null
  /**
   * Doppler Project
   */
  doppler_project?: string | null
  /**
   * Doppler Service Token
   */
  doppler_service_token?: string | null
  /**
   * Org Id
   */
  org_id: string
  /**
   * Providers
   */
  providers: Array<ToolServerProvider>
  /**
   * Servers
   */
  servers: Array<ToolServer>
  /**
   * Tools
   */
  tools: Array<Tool>
  /**
   * User Id
   */
  user_id: string
}

/**
 * ComposioToolServerClient
 * A client for a tool server that is a composio server.
 */
export type ComposioToolServerClient = {
  /**
   * Allowed Tools
   */
  allowed_tools: Array<string>
  /**
   * Auth Config Id
   */
  auth_config_id: string
  /**
   * Client Type
   */
  client_type: 'composio'
  /**
   * Composio Server Id
   */
  composio_server_id: string
  /**
   * Mcp Url
   */
  mcp_url: string
  /**
   * Server Id
   */
  server_id: string
}

/**
 * BlaxelToolServerClient
 * A client for a tool server that is a blaxel server.
 */
export type BlaxelToolServerClient = {
  /**
   * Blaxel Function
   */
  blaxel_function: string
  /**
   * Blaxel Workspace
   */
  blaxel_workspace: string
  /**
   * Client Type
   */
  client_type: 'blaxel'
  /**
   * Server Id
   */
  server_id: string
}

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>
}

/**
 * GetAllFlagsResponse
 */
export type GetAllFlagsResponse = {
  /**
   * Flags
   */
  flags: {
    [key: string]: boolean | string
  }
  /**
   * User Id
   */
  user_id: string
}

/**
 * Body_upsert_secret_api_v1_secrets__secret_name__put
 */
export type BodyUpsertSecretApiV1SecretsSecretNamePut = {
  request: UpsertSecretRequest
}

/**
 * BasicPostResponse
 * A basic post response.
 */
export type BasicPostResponse = {
  /**
   * Message
   */
  message?: string | null
  /**
   * Success
   */
  success: boolean
}

/**
 * BasicPostBody
 * A basic post body.
 */
export type BasicPostBody = {
  /**
   * Content
   */
  content: string
}

/**
 * AuthenticationStatus
 */
export type AuthenticationStatus = {
  /**
   * Credentials Provided
   */
  credentials_provided: boolean
  /**
   * Is Authenticated
   */
  is_authenticated: boolean
  method?: AuthenticationMethod | null
  /**
   * User Id
   */
  user_id?: string | null
}

/**
 * AuthenticationMethod
 */
export type AuthenticationMethod = 'propelauth' | 'api_key'

/**
 * AuthenticationMethod
 */
export const AuthenticationMethod = {
  PROPELAUTH: 'propelauth',
  API_KEY: 'api_key'
} as const

/**
 * ApprovalAndPolicy
 * Approval and policy
 */
export type ApprovalAndPolicy = {
  approval: ActionApprovalRequest
  /**
   * Canonical Resource Name
   */
  canonical_resource_name: string
  /**
   * Integration Name
   */
  integration_name: string
  policy: Policy
  /**
   * Tool Name
   */
  tool_name: string
}

/**
 * ActionApprovalRequest
 * Model that holds the state of a request for an action to be taken with respect to a policy.
 * Ex. if the policy is set to require approval, then we will have a request for approval.
 */
export type ActionApprovalRequest = {
  /**
   * Created At
   */
  created_at?: string
  /**
   * Id
   */
  id: number | null
  /**
   * Last Updated At
   */
  last_updated_at?: string
  /**
   * Payload
   */
  payload?: {
    [key: string]: unknown
  } | null
  /**
   * Policy Id
   */
  policy_id: string
  state?: ActionApprovalState
  /**
   * Updated By User Id
   */
  updated_by_user_id: string
}

/**
 * ActionApprovalState
 * Enum for policy approval states
 */
export type ActionApprovalState = 'pending' | 'approved' | 'rejected'

/**
 * ActionApprovalState
 * Enum for policy approval states
 */
export const ActionApprovalState = {
  PENDING: 'pending',
  APPROVED: 'approved',
  REJECTED: 'rejected'
} as const

/**
 * AccountInformation
 * Model for storing account information
 */
export type AccountInformation = {
  account: UserAccount
  organization: Organization
  /**
   * User Id
   */
  user_id: string
}

/**
 * AccountCreateRequest
 */
export type AccountCreateRequest = {
  /**
   * Email
   */
  email: string
  /**
   * Invitation Code
   */
  invitation_code: string
}

export type GetAiDocumentationAiTxtGetData = {
  body?: never
  path?: never
  query?: never
  url: '/ai.txt'
}

export type GetAiDocumentationAiTxtGetResponses = {
  /**
   * Successful Response
   */
  200: string
}

export type GetAiDocumentationAiTxtGetResponse =
  GetAiDocumentationAiTxtGetResponses[keyof GetAiDocumentationAiTxtGetResponses]

export type DeleteAccountApiV1AccountDeleteData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/account/'
}

export type DeleteAccountApiV1AccountDeleteResponses = {
  /**
   * Response Delete Account Api V1 Account  Delete
   * Successful Response
   */
  200: boolean
}

export type DeleteAccountApiV1AccountDeleteResponse =
  DeleteAccountApiV1AccountDeleteResponses[keyof DeleteAccountApiV1AccountDeleteResponses]

export type GetAccountInformationApiV1AccountGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/account/'
}

export type GetAccountInformationApiV1AccountGetResponses = {
  /**
   * Successful Response
   */
  200: AccountInformation
}

export type GetAccountInformationApiV1AccountGetResponse =
  GetAccountInformationApiV1AccountGetResponses[keyof GetAccountInformationApiV1AccountGetResponses]

export type CreateAccountApiV1AccountPostData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/account/'
}

export type CreateAccountApiV1AccountPostResponses = {
  /**
   * Successful Response
   */
  200: UserAccount
}

export type CreateAccountApiV1AccountPostResponse =
  CreateAccountApiV1AccountPostResponses[keyof CreateAccountApiV1AccountPostResponses]

export type GetApiKeyApiV1AccountApiKeyGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/account/api-key'
}

export type GetApiKeyApiV1AccountApiKeyGetResponses = {
  /**
   * Successful Response
   */
  200: UserAccount
}

export type GetApiKeyApiV1AccountApiKeyGetResponse =
  GetApiKeyApiV1AccountApiKeyGetResponses[keyof GetApiKeyApiV1AccountApiKeyGetResponses]

export type GetAuthStatusApiV1AccountAuthStatusGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/account/auth/status'
}

export type GetAuthStatusApiV1AccountAuthStatusGetResponses = {
  /**
   * Successful Response
   */
  200: AuthenticationStatus
}

export type GetAuthStatusApiV1AccountAuthStatusGetResponse =
  GetAuthStatusApiV1AccountAuthStatusGetResponses[keyof GetAuthStatusApiV1AccountAuthStatusGetResponses]

export type CreateAccountByInvitationApiV1AccountInvitationCodePostData = {
  body: AccountCreateRequest
  path?: never
  query?: never
  url: '/api/v1/account/invitation-code'
}

export type CreateAccountByInvitationApiV1AccountInvitationCodePostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateAccountByInvitationApiV1AccountInvitationCodePostError =
  CreateAccountByInvitationApiV1AccountInvitationCodePostErrors[keyof CreateAccountByInvitationApiV1AccountInvitationCodePostErrors]

export type CreateAccountByInvitationApiV1AccountInvitationCodePostResponses = {
  /**
   * Successful Response
   */
  200: AccountInformation
}

export type CreateAccountByInvitationApiV1AccountInvitationCodePostResponse =
  CreateAccountByInvitationApiV1AccountInvitationCodePostResponses[keyof CreateAccountByInvitationApiV1AccountInvitationCodePostResponses]

export type GetServiceTokenApiV1AccountServiceTokenGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/account/service-token'
}

export type GetServiceTokenApiV1AccountServiceTokenGetResponses = {
  /**
   * Successful Response
   */
  200: ServiceTokenResponse
}

export type GetServiceTokenApiV1AccountServiceTokenGetResponse =
  GetServiceTokenApiV1AccountServiceTokenGetResponses[keyof GetServiceTokenApiV1AccountServiceTokenGetResponses]

export type RotateServiceTokenApiV1AccountServiceTokenPostData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/account/service-token'
}

export type RotateServiceTokenApiV1AccountServiceTokenPostResponses = {
  /**
   * Successful Response
   */
  200: ServiceTokenResponse
}

export type RotateServiceTokenApiV1AccountServiceTokenPostResponse =
  RotateServiceTokenApiV1AccountServiceTokenPostResponses[keyof RotateServiceTokenApiV1AccountServiceTokenPostResponses]

export type GetAuditLogsApiV1AuditGetData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Page Size
     * Items per page
     */
    page_size?: number
    /**
     * Policy Id
     * Filter by policy ID
     */
    policy_id?: string | null
    /**
     * Action
     * Filter by action type
     */
    action?: string | null
    /**
     * Start Date
     * Filter logs after this date (ISO format)
     */
    start_date?: string | null
    /**
     * End Date
     * Filter logs before this date (ISO format)
     */
    end_date?: string | null
  }
  url: '/api/v1/audit/'
}

export type GetAuditLogsApiV1AuditGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetAuditLogsApiV1AuditGetError =
  GetAuditLogsApiV1AuditGetErrors[keyof GetAuditLogsApiV1AuditGetErrors]

export type GetAuditLogsApiV1AuditGetResponses = {
  /**
   * Successful Response
   */
  200: PaginatedResponseAuditLog
}

export type GetAuditLogsApiV1AuditGetResponse =
  GetAuditLogsApiV1AuditGetResponses[keyof GetAuditLogsApiV1AuditGetResponses]

export type GetAllFlagsApiV1FlagsGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/flags/'
}

export type GetAllFlagsApiV1FlagsGetResponses = {
  /**
   * Successful Response
   */
  200: GetAllFlagsResponse
}

export type GetAllFlagsApiV1FlagsGetResponse =
  GetAllFlagsApiV1FlagsGetResponses[keyof GetAllFlagsApiV1FlagsGetResponses]

export type ListIntegrationsApiV1IntegrationsGetData = {
  body?: never
  path?: never
  query?: {
    /**
     * Active
     */
    active?: boolean
  }
  url: '/api/v1/integrations/'
}

export type ListIntegrationsApiV1IntegrationsGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ListIntegrationsApiV1IntegrationsGetError =
  ListIntegrationsApiV1IntegrationsGetErrors[keyof ListIntegrationsApiV1IntegrationsGetErrors]

export type ListIntegrationsApiV1IntegrationsGetResponses = {
  /**
   * Response List Integrations Api V1 Integrations  Get
   * Successful Response
   */
  200: Array<IntegrationConfigDetails>
}

export type ListIntegrationsApiV1IntegrationsGetResponse =
  ListIntegrationsApiV1IntegrationsGetResponses[keyof ListIntegrationsApiV1IntegrationsGetResponses]

export type GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetData = {
  body?: never
  path: {
    /**
     * Integration Name
     */
    integration_name: string
  }
  query?: never
  url: '/api/v1/integrations/{integration_name}/tools'
}

export type GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError
  }

export type GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetError =
  GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetErrors[keyof GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetErrors]

export type GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetResponses =
  {
    /**
     * Response Get Integration Tools Api V1 Integrations  Integration Name  Tools Get
     * Successful Response
     */
    200: Array<ToolResource>
  }

export type GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetResponse =
  GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetResponses[keyof GetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetResponses]

export type UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostData =
  {
    body: MultipleToolCustomTagsParamsRequest
    path: {
      /**
       * Integration Name
       */
      integration_name: string
    }
    query?: never
    url: '/api/v1/integrations/{integration_name}/tools/custom/tags'
  }

export type UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError
  }

export type UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostError =
  UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostErrors[keyof UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostErrors]

export type UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostResponses =
  {
    /**
     * Response Upsert Multiple Tool Custom Tags Api V1 Integrations  Integration Name  Tools Custom Tags Post
     * Successful Response
     */
    200: Array<ToolResource>
  }

export type UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostResponse =
  UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostResponses[keyof UpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostResponses]

export type GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetData =
  {
    body?: never
    path: {
      /**
       * Integration Name
       */
      integration_name: string
      /**
       * Tool Name
       */
      tool_name: string
    }
    query?: never
    url: '/api/v1/integrations/{integration_name}/tools/{tool_name}'
  }

export type GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError
  }

export type GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetError =
  GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetErrors[keyof GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetErrors]

export type GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetResponses =
  {
    /**
     * Successful Response
     */
    200: ToolResource
  }

export type GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetResponse =
  GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetResponses[keyof GetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetResponses]

export type DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteData =
  {
    body: ToolCustomTagSelectionParamsRequest
    path: {
      /**
       * Integration Name
       */
      integration_name: string
      /**
       * Tool Name
       */
      tool_name: string
    }
    query?: never
    url: '/api/v1/integrations/{integration_name}/tools/{tool_name}/custom/tags'
  }

export type DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError
  }

export type DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteError =
  DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteErrors[keyof DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteErrors]

export type DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteResponses =
  {
    /**
     * Successful Response
     */
    200: ToolResource
  }

export type DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteResponse =
  DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteResponses[keyof DeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteResponses]

export type UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostData =
  {
    body: ToolCustomTagsParamsRequest
    path: {
      /**
       * Integration Name
       */
      integration_name: string
      /**
       * Tool Name
       */
      tool_name: string
    }
    query?: never
    url: '/api/v1/integrations/{integration_name}/tools/{tool_name}/custom/tags'
  }

export type UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError
  }

export type UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostError =
  UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostErrors[keyof UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostErrors]

export type UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostResponses =
  {
    /**
     * Successful Response
     */
    200: ToolResource
  }

export type UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostResponse =
  UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostResponses[keyof UpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostResponses]

export type GetAllPoliciesApiV1PoliciesGetData = {
  body?: never
  path?: never
  query?: {
    /**
     * Skip
     */
    skip?: number
    /**
     * Limit
     */
    limit?: number
  }
  url: '/api/v1/policies/'
}

export type GetAllPoliciesApiV1PoliciesGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetAllPoliciesApiV1PoliciesGetError =
  GetAllPoliciesApiV1PoliciesGetErrors[keyof GetAllPoliciesApiV1PoliciesGetErrors]

export type GetAllPoliciesApiV1PoliciesGetResponses = {
  /**
   * Response Get All Policies Api V1 Policies  Get
   * Successful Response
   */
  200: Array<Policy>
}

export type GetAllPoliciesApiV1PoliciesGetResponse =
  GetAllPoliciesApiV1PoliciesGetResponses[keyof GetAllPoliciesApiV1PoliciesGetResponses]

export type CreatePolicyApiV1PoliciesPostData = {
  body: NewPolicyRequest
  path?: never
  query?: never
  url: '/api/v1/policies/'
}

export type CreatePolicyApiV1PoliciesPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreatePolicyApiV1PoliciesPostError =
  CreatePolicyApiV1PoliciesPostErrors[keyof CreatePolicyApiV1PoliciesPostErrors]

export type CreatePolicyApiV1PoliciesPostResponses = {
  /**
   * Successful Response
   */
  200: Policy
}

export type CreatePolicyApiV1PoliciesPostResponse =
  CreatePolicyApiV1PoliciesPostResponses[keyof CreatePolicyApiV1PoliciesPostResponses]

export type GetApprovalRequestsApiV1PoliciesApprovalsGetData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page
     */
    page?: number
    /**
     * Page Size
     */
    page_size?: number
  }
  url: '/api/v1/policies/approvals'
}

export type GetApprovalRequestsApiV1PoliciesApprovalsGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetApprovalRequestsApiV1PoliciesApprovalsGetError =
  GetApprovalRequestsApiV1PoliciesApprovalsGetErrors[keyof GetApprovalRequestsApiV1PoliciesApprovalsGetErrors]

export type GetApprovalRequestsApiV1PoliciesApprovalsGetResponses = {
  /**
   * Response Get Approval Requests Api V1 Policies Approvals Get
   * Successful Response
   */
  200: Array<ApprovalAndPolicy>
}

export type GetApprovalRequestsApiV1PoliciesApprovalsGetResponse =
  GetApprovalRequestsApiV1PoliciesApprovalsGetResponses[keyof GetApprovalRequestsApiV1PoliciesApprovalsGetResponses]

export type CheckResourceAccessGetApiV1PoliciesResourcesCheckGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/policies/resources/check'
}

export type CheckResourceAccessGetApiV1PoliciesResourcesCheckGetResponses = {
  /**
   * Successful Response
   */
  200: PolicyCheckResult
}

export type CheckResourceAccessGetApiV1PoliciesResourcesCheckGetResponse =
  CheckResourceAccessGetApiV1PoliciesResourcesCheckGetResponses[keyof CheckResourceAccessGetApiV1PoliciesResourcesCheckGetResponses]

export type CheckResourceAccessApiV1PoliciesResourcesCheckPostData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/policies/resources/check'
}

export type CheckResourceAccessApiV1PoliciesResourcesCheckPostResponses = {
  /**
   * Successful Response
   */
  200: PolicyCheckResult
}

export type CheckResourceAccessApiV1PoliciesResourcesCheckPostResponse =
  CheckResourceAccessApiV1PoliciesResourcesCheckPostResponses[keyof CheckResourceAccessApiV1PoliciesResourcesCheckPostResponses]

export type CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetData =
  {
    body?: never
    path: {
      /**
       * Resource Name
       */
      resource_name: string
    }
    query?: never
    url: '/api/v1/policies/resources/{resource_name}/approval'
  }

export type CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError
  }

export type CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetError =
  CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetErrors[keyof CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetErrors]

export type CheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetResponses =
  {
    /**
     * Successful Response
     */
    200: unknown
  }

export type GetPolicyApiV1PoliciesPolicyIdGetData = {
  body?: never
  path: {
    /**
     * Policy Id
     */
    policy_id: string
  }
  query?: never
  url: '/api/v1/policies/{policy_id}'
}

export type GetPolicyApiV1PoliciesPolicyIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetPolicyApiV1PoliciesPolicyIdGetError =
  GetPolicyApiV1PoliciesPolicyIdGetErrors[keyof GetPolicyApiV1PoliciesPolicyIdGetErrors]

export type GetPolicyApiV1PoliciesPolicyIdGetResponses = {
  /**
   * Successful Response
   */
  200: Policy
}

export type GetPolicyApiV1PoliciesPolicyIdGetResponse =
  GetPolicyApiV1PoliciesPolicyIdGetResponses[keyof GetPolicyApiV1PoliciesPolicyIdGetResponses]

export type UpdatePolicyApiV1PoliciesPolicyIdPutData = {
  /**
   * Update Data
   */
  body: {
    [key: string]: unknown
  }
  path: {
    /**
     * Policy Id
     */
    policy_id: string
  }
  query?: never
  url: '/api/v1/policies/{policy_id}'
}

export type UpdatePolicyApiV1PoliciesPolicyIdPutErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpdatePolicyApiV1PoliciesPolicyIdPutError =
  UpdatePolicyApiV1PoliciesPolicyIdPutErrors[keyof UpdatePolicyApiV1PoliciesPolicyIdPutErrors]

export type UpdatePolicyApiV1PoliciesPolicyIdPutResponses = {
  /**
   * Successful Response
   */
  200: Policy
}

export type UpdatePolicyApiV1PoliciesPolicyIdPutResponse =
  UpdatePolicyApiV1PoliciesPolicyIdPutResponses[keyof UpdatePolicyApiV1PoliciesPolicyIdPutResponses]

export type CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostData = {
  body?: never
  path: {
    /**
     * Policy Id
     */
    policy_id: string
    /**
     * Audit Id
     */
    audit_id: number
  }
  query?: never
  url: '/api/v1/policies/{policy_id}/{audit_id}/status'
}

export type CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostError =
  CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostErrors[keyof CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostErrors]

export type CheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type ListProvidersApiV1ProvidersGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/providers/'
}

export type ListProvidersApiV1ProvidersGetResponses = {
  /**
   * Response List Providers Api V1 Providers  Get
   * Successful Response
   */
  200: Array<ToolServerProvider>
}

export type ListProvidersApiV1ProvidersGetResponse =
  ListProvidersApiV1ProvidersGetResponses[keyof ListProvidersApiV1ProvidersGetResponses]

export type GetProviderApiV1ProvidersProviderIdGetData = {
  body?: never
  path: {
    /**
     * Provider Id
     */
    provider_id: string
  }
  query?: never
  url: '/api/v1/providers/{provider_id}'
}

export type GetProviderApiV1ProvidersProviderIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetProviderApiV1ProvidersProviderIdGetError =
  GetProviderApiV1ProvidersProviderIdGetErrors[keyof GetProviderApiV1ProvidersProviderIdGetErrors]

export type GetProviderApiV1ProvidersProviderIdGetResponses = {
  /**
   * Successful Response
   */
  200: ToolServerProvider
}

export type GetProviderApiV1ProvidersProviderIdGetResponse =
  GetProviderApiV1ProvidersProviderIdGetResponses[keyof GetProviderApiV1ProvidersProviderIdGetResponses]

export type GetServersApiV1ProvidersProviderIdServersGetData = {
  body?: never
  path: {
    /**
     * Provider Id
     */
    provider_id: string
  }
  query?: never
  url: '/api/v1/providers/{provider_id}/servers'
}

export type GetServersApiV1ProvidersProviderIdServersGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetServersApiV1ProvidersProviderIdServersGetError =
  GetServersApiV1ProvidersProviderIdServersGetErrors[keyof GetServersApiV1ProvidersProviderIdServersGetErrors]

export type GetServersApiV1ProvidersProviderIdServersGetResponses = {
  /**
   * Response Get Servers Api V1 Providers  Provider Id  Servers Get
   * Successful Response
   */
  200: Array<ToolServer>
}

export type GetServersApiV1ProvidersProviderIdServersGetResponse =
  GetServersApiV1ProvidersProviderIdServersGetResponses[keyof GetServersApiV1ProvidersProviderIdServersGetResponses]

export type SyncProviderApiV1ProvidersProviderIdSyncPostData = {
  body?: never
  path: {
    /**
     * Provider Id
     */
    provider_id: string
  }
  query?: never
  url: '/api/v1/providers/{provider_id}/sync'
}

export type SyncProviderApiV1ProvidersProviderIdSyncPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SyncProviderApiV1ProvidersProviderIdSyncPostError =
  SyncProviderApiV1ProvidersProviderIdSyncPostErrors[keyof SyncProviderApiV1ProvidersProviderIdSyncPostErrors]

export type SyncProviderApiV1ProvidersProviderIdSyncPostResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type InitializeApiV1SdkInitializeGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/sdk/initialize'
}

export type InitializeApiV1SdkInitializeGetResponses = {
  /**
   * Successful Response
   */
  200: InitializeResponse
}

export type InitializeApiV1SdkInitializeGetResponse =
  InitializeApiV1SdkInitializeGetResponses[keyof InitializeApiV1SdkInitializeGetResponses]

export type GetServiceTokenApiV1SdkServiceTokenGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/sdk/service-token'
}

export type GetServiceTokenApiV1SdkServiceTokenGetResponses = {
  /**
   * Successful Response
   */
  200: ServiceTokenResponse
}

export type GetServiceTokenApiV1SdkServiceTokenGetResponse =
  GetServiceTokenApiV1SdkServiceTokenGetResponses[keyof GetServiceTokenApiV1SdkServiceTokenGetResponses]

export type ReindexApiV1SearchReindexPostData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/search/reindex'
}

export type ReindexApiV1SearchReindexPostResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type ReindexToolprintsApiV1SearchReindexToolprintsPostData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/search/reindex/toolprints'
}

export type ReindexToolprintsApiV1SearchReindexToolprintsPostResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type ReindexToolsApiV1SearchReindexToolsPostData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/search/reindex/tools'
}

export type ReindexToolsApiV1SearchReindexToolsPostResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type SearchToolprintsApiV1SearchToolprintsPostData = {
  body: SearchRequest
  path?: never
  query?: never
  url: '/api/v1/search/toolprints'
}

export type SearchToolprintsApiV1SearchToolprintsPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SearchToolprintsApiV1SearchToolprintsPostError =
  SearchToolprintsApiV1SearchToolprintsPostErrors[keyof SearchToolprintsApiV1SearchToolprintsPostErrors]

export type SearchToolprintsApiV1SearchToolprintsPostResponses = {
  /**
   * Successful Response
   */
  200: SearchResponseScoredItemRegisteredToolprintReadable
}

export type SearchToolprintsApiV1SearchToolprintsPostResponse =
  SearchToolprintsApiV1SearchToolprintsPostResponses[keyof SearchToolprintsApiV1SearchToolprintsPostResponses]

export type GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostData =
  {
    body: SearchRequest
    path?: never
    query?: never
    url: '/api/v1/search/toolprints/recommendation'
  }

export type GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError
  }

export type GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostError =
  GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostErrors[keyof GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostErrors]

export type GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostResponses =
  {
    /**
     * Successful Response
     */
    200: ToolprintRecommendationReadable
  }

export type GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostResponse =
  GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostResponses[keyof GetToolprintRecommendationApiV1SearchToolprintsRecommendationPostResponses]

export type SearchToolsApiV1SearchToolsPostData = {
  body: SearchRequest
  path?: never
  query?: never
  url: '/api/v1/search/tools'
}

export type SearchToolsApiV1SearchToolsPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SearchToolsApiV1SearchToolsPostError =
  SearchToolsApiV1SearchToolsPostErrors[keyof SearchToolsApiV1SearchToolsPostErrors]

export type SearchToolsApiV1SearchToolsPostResponses = {
  /**
   * Successful Response
   */
  200: SearchResponseScoredItemTool
}

export type SearchToolsApiV1SearchToolsPostResponse =
  SearchToolsApiV1SearchToolsPostResponses[keyof SearchToolsApiV1SearchToolsPostResponses]

export type GetSecretsApiV1SecretsGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/secrets/'
}

export type GetSecretsApiV1SecretsGetResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type GetSecretApiV1SecretsSecretNameGetData = {
  body?: never
  path: {
    /**
     * Secret Name
     */
    secret_name: string
  }
  query?: never
  url: '/api/v1/secrets/{secret_name}'
}

export type GetSecretApiV1SecretsSecretNameGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetSecretApiV1SecretsSecretNameGetError =
  GetSecretApiV1SecretsSecretNameGetErrors[keyof GetSecretApiV1SecretsSecretNameGetErrors]

export type GetSecretApiV1SecretsSecretNameGetResponses = {
  /**
   * Response Get Secret Api V1 Secrets  Secret Name  Get
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type GetSecretApiV1SecretsSecretNameGetResponse =
  GetSecretApiV1SecretsSecretNameGetResponses[keyof GetSecretApiV1SecretsSecretNameGetResponses]

export type UpsertSecretApiV1SecretsSecretNamePutData = {
  body: BodyUpsertSecretApiV1SecretsSecretNamePut
  headers?: {
    /**
     * X-Onegrep-Profile-Id
     */
    'X-ONEGREP-PROFILE-ID'?: string | null
  }
  path: {
    /**
     * Secret Name
     */
    secret_name: string
  }
  query?: never
  url: '/api/v1/secrets/{secret_name}'
}

export type UpsertSecretApiV1SecretsSecretNamePutErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpsertSecretApiV1SecretsSecretNamePutError =
  UpsertSecretApiV1SecretsSecretNamePutErrors[keyof UpsertSecretApiV1SecretsSecretNamePutErrors]

export type UpsertSecretApiV1SecretsSecretNamePutResponses = {
  /**
   * Successful Response
   */
  200: UpsertSecretResponse
}

export type UpsertSecretApiV1SecretsSecretNamePutResponse =
  UpsertSecretApiV1SecretsSecretNamePutResponses[keyof UpsertSecretApiV1SecretsSecretNamePutResponses]

export type ListServersApiV1ServersGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/servers/'
}

export type ListServersApiV1ServersGetResponses = {
  /**
   * Response List Servers Api V1 Servers  Get
   * Successful Response
   */
  200: Array<ToolServer>
}

export type ListServersApiV1ServersGetResponse =
  ListServersApiV1ServersGetResponses[keyof ListServersApiV1ServersGetResponses]

export type GetServerApiV1ServersServerIdGetData = {
  body?: never
  path: {
    /**
     * Server Id
     */
    server_id: string
  }
  query?: never
  url: '/api/v1/servers/{server_id}'
}

export type GetServerApiV1ServersServerIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetServerApiV1ServersServerIdGetError =
  GetServerApiV1ServersServerIdGetErrors[keyof GetServerApiV1ServersServerIdGetErrors]

export type GetServerApiV1ServersServerIdGetResponses = {
  /**
   * Successful Response
   */
  200: ToolServer
}

export type GetServerApiV1ServersServerIdGetResponse =
  GetServerApiV1ServersServerIdGetResponses[keyof GetServerApiV1ServersServerIdGetResponses]

export type GetServerClientApiV1ServersServerIdClientGetData = {
  body?: never
  path: {
    /**
     * Server Id
     */
    server_id: string
  }
  query?: never
  url: '/api/v1/servers/{server_id}/client'
}

export type GetServerClientApiV1ServersServerIdClientGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetServerClientApiV1ServersServerIdClientGetError =
  GetServerClientApiV1ServersServerIdClientGetErrors[keyof GetServerClientApiV1ServersServerIdClientGetErrors]

export type GetServerClientApiV1ServersServerIdClientGetResponses = {
  /**
   * Response Get Server Client Api V1 Servers  Server Id  Client Get
   * Successful Response
   */
  200:
    | ({
        client_type: 'mcp'
      } & McpToolServerClient)
    | ({
        client_type: 'blaxel'
      } & BlaxelToolServerClient)
    | ({
        client_type: 'smithery'
      } & SmitheryToolServerClient)
    | ({
        client_type: 'composio'
      } & ComposioToolServerClient)
}

export type GetServerClientApiV1ServersServerIdClientGetResponse =
  GetServerClientApiV1ServersServerIdClientGetResponses[keyof GetServerClientApiV1ServersServerIdClientGetResponses]

export type GetServerPropertiesApiV1ServersServerIdPropertiesGetData = {
  body?: never
  path: {
    /**
     * Server Id
     */
    server_id: string
  }
  query?: never
  url: '/api/v1/servers/{server_id}/properties'
}

export type GetServerPropertiesApiV1ServersServerIdPropertiesGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetServerPropertiesApiV1ServersServerIdPropertiesGetError =
  GetServerPropertiesApiV1ServersServerIdPropertiesGetErrors[keyof GetServerPropertiesApiV1ServersServerIdPropertiesGetErrors]

export type GetServerPropertiesApiV1ServersServerIdPropertiesGetResponses = {
  /**
   * Successful Response
   */
  200: ToolServerProperties
}

export type GetServerPropertiesApiV1ServersServerIdPropertiesGetResponse =
  GetServerPropertiesApiV1ServersServerIdPropertiesGetResponses[keyof GetServerPropertiesApiV1ServersServerIdPropertiesGetResponses]

export type PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchData = {
  /**
   * Value
   */
  body: {
    [key: string]: unknown
  }
  path: {
    /**
     * Server Id
     */
    server_id: string
    /**
     * Key
     */
    key: string
  }
  query?: never
  url: '/api/v1/servers/{server_id}/properties/{key}'
}

export type PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError
  }

export type PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchError =
  PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchErrors[keyof PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchErrors]

export type PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchResponses =
  {
    /**
     * Successful Response
     */
    200: ToolServerProperties
  }

export type PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchResponse =
  PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchResponses[keyof PatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchResponses]

export type GetStrategyApiV1StrategyPostData = {
  body: SearchRequest
  path?: never
  query?: never
  url: '/api/v1/strategy/'
}

export type GetStrategyApiV1StrategyPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetStrategyApiV1StrategyPostError =
  GetStrategyApiV1StrategyPostErrors[keyof GetStrategyApiV1StrategyPostErrors]

export type GetStrategyApiV1StrategyPostResponses = {
  /**
   * Response Get Strategy Api V1 Strategy  Post
   * Successful Response
   */
  200: Array<Strategy>
}

export type GetStrategyApiV1StrategyPostResponse =
  GetStrategyApiV1StrategyPostResponses[keyof GetStrategyApiV1StrategyPostResponses]

export type CreateFakeRecipesApiV1StrategyFakePostData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/strategy/fake'
}

export type CreateFakeRecipesApiV1StrategyFakePostResponses = {
  /**
   * Response Create Fake Recipes Api V1 Strategy Fake Post
   * Successful Response
   */
  200: Array<RecipeReadable>
}

export type CreateFakeRecipesApiV1StrategyFakePostResponse =
  CreateFakeRecipesApiV1StrategyFakePostResponses[keyof CreateFakeRecipesApiV1StrategyFakePostResponses]

export type CreateToolprintApiV1ToolprintsPostData = {
  body: ToolprintInput
  path?: never
  query?: never
  url: '/api/v1/toolprints/'
}

export type CreateToolprintApiV1ToolprintsPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateToolprintApiV1ToolprintsPostError =
  CreateToolprintApiV1ToolprintsPostErrors[keyof CreateToolprintApiV1ToolprintsPostErrors]

export type CreateToolprintApiV1ToolprintsPostResponses = {
  /**
   * Successful Response
   */
  200: RegisteredToolprintReadable
}

export type CreateToolprintApiV1ToolprintsPostResponse =
  CreateToolprintApiV1ToolprintsPostResponses[keyof CreateToolprintApiV1ToolprintsPostResponses]

export type GetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/toolprints/.well-known/ai.txt'
}

export type GetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetResponses =
  {
    /**
     * Successful Response
     */
    200: string
  }

export type GetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetResponse =
  GetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetResponses[keyof GetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetResponses]

export type GetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/toolprints/.well-known/schema'
}

export type GetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetResponses = {
  /**
   * Response Get Toolprint Schema Api V1 Toolprints  Well Known Schema Get
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type GetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetResponse =
  GetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetResponses[keyof GetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetResponses]

export type GetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/toolprints/.well-known/template'
}

export type GetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetResponses = {
  /**
   * Successful Response
   */
  200: string
}

export type GetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetResponse =
  GetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetResponses[keyof GetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetResponses]

export type CreateToolprintJsonApiV1ToolprintsJsonPostData = {
  body: BasicPostBody
  path?: never
  query?: never
  url: '/api/v1/toolprints/json'
}

export type CreateToolprintJsonApiV1ToolprintsJsonPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateToolprintJsonApiV1ToolprintsJsonPostError =
  CreateToolprintJsonApiV1ToolprintsJsonPostErrors[keyof CreateToolprintJsonApiV1ToolprintsJsonPostErrors]

export type CreateToolprintJsonApiV1ToolprintsJsonPostResponses = {
  /**
   * Successful Response
   */
  200: RegisteredToolprintReadable
}

export type CreateToolprintJsonApiV1ToolprintsJsonPostResponse =
  CreateToolprintJsonApiV1ToolprintsJsonPostResponses[keyof CreateToolprintJsonApiV1ToolprintsJsonPostResponses]

export type ValidateToolprintApiV1ToolprintsValidatePostData = {
  body: ToolprintInput
  path?: never
  query?: never
  url: '/api/v1/toolprints/validate'
}

export type ValidateToolprintApiV1ToolprintsValidatePostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ValidateToolprintApiV1ToolprintsValidatePostError =
  ValidateToolprintApiV1ToolprintsValidatePostErrors[keyof ValidateToolprintApiV1ToolprintsValidatePostErrors]

export type ValidateToolprintApiV1ToolprintsValidatePostResponses = {
  /**
   * Successful Response
   */
  200: BasicPostResponse
}

export type ValidateToolprintApiV1ToolprintsValidatePostResponse =
  ValidateToolprintApiV1ToolprintsValidatePostResponses[keyof ValidateToolprintApiV1ToolprintsValidatePostResponses]

export type ValidateToolprintJsonApiV1ToolprintsValidateJsonPostData = {
  body: BasicPostBody
  path?: never
  query?: never
  url: '/api/v1/toolprints/validate/json'
}

export type ValidateToolprintJsonApiV1ToolprintsValidateJsonPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ValidateToolprintJsonApiV1ToolprintsValidateJsonPostError =
  ValidateToolprintJsonApiV1ToolprintsValidateJsonPostErrors[keyof ValidateToolprintJsonApiV1ToolprintsValidateJsonPostErrors]

export type ValidateToolprintJsonApiV1ToolprintsValidateJsonPostResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type ValidateToolprintYamlApiV1ToolprintsValidateYamlPostData = {
  /**
   * Yaml Content
   */
  body: string
  path?: never
  query?: never
  url: '/api/v1/toolprints/validate/yaml'
}

export type ValidateToolprintYamlApiV1ToolprintsValidateYamlPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ValidateToolprintYamlApiV1ToolprintsValidateYamlPostError =
  ValidateToolprintYamlApiV1ToolprintsValidateYamlPostErrors[keyof ValidateToolprintYamlApiV1ToolprintsValidateYamlPostErrors]

export type ValidateToolprintYamlApiV1ToolprintsValidateYamlPostResponses = {
  /**
   * Successful Response
   */
  200: BasicPostResponse
}

export type ValidateToolprintYamlApiV1ToolprintsValidateYamlPostResponse =
  ValidateToolprintYamlApiV1ToolprintsValidateYamlPostResponses[keyof ValidateToolprintYamlApiV1ToolprintsValidateYamlPostResponses]

export type CreateToolprintYamlApiV1ToolprintsYamlPostData = {
  /**
   * Yaml Content
   */
  body: string
  path?: never
  query?: never
  url: '/api/v1/toolprints/yaml'
}

export type CreateToolprintYamlApiV1ToolprintsYamlPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateToolprintYamlApiV1ToolprintsYamlPostError =
  CreateToolprintYamlApiV1ToolprintsYamlPostErrors[keyof CreateToolprintYamlApiV1ToolprintsYamlPostErrors]

export type CreateToolprintYamlApiV1ToolprintsYamlPostResponses = {
  /**
   * Successful Response
   */
  200: RegisteredToolprintReadable
}

export type CreateToolprintYamlApiV1ToolprintsYamlPostResponse =
  CreateToolprintYamlApiV1ToolprintsYamlPostResponses[keyof CreateToolprintYamlApiV1ToolprintsYamlPostResponses]

export type GetToolprintApiV1ToolprintsToolprintIdGetData = {
  body?: never
  path: {
    /**
     * Toolprint Id
     */
    toolprint_id: string
  }
  query?: never
  url: '/api/v1/toolprints/{toolprint_id}'
}

export type GetToolprintApiV1ToolprintsToolprintIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetToolprintApiV1ToolprintsToolprintIdGetError =
  GetToolprintApiV1ToolprintsToolprintIdGetErrors[keyof GetToolprintApiV1ToolprintsToolprintIdGetErrors]

export type GetToolprintApiV1ToolprintsToolprintIdGetResponses = {
  /**
   * Successful Response
   */
  200: RegisteredToolprintReadable
}

export type GetToolprintApiV1ToolprintsToolprintIdGetResponse =
  GetToolprintApiV1ToolprintsToolprintIdGetResponses[keyof GetToolprintApiV1ToolprintsToolprintIdGetResponses]

export type ListToolsApiV1ToolsGetData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/tools/'
}

export type ListToolsApiV1ToolsGetResponses = {
  /**
   * Response List Tools Api V1 Tools  Get
   * Successful Response
   */
  200: Array<Tool>
}

export type ListToolsApiV1ToolsGetResponse =
  ListToolsApiV1ToolsGetResponses[keyof ListToolsApiV1ToolsGetResponses]

export type GetToolResourcesBatchApiV1ToolsResourcesBatchPostData = {
  body: MultiIdPostBody
  path?: never
  query?: never
  url: '/api/v1/tools/resources/batch'
}

export type GetToolResourcesBatchApiV1ToolsResourcesBatchPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetToolResourcesBatchApiV1ToolsResourcesBatchPostError =
  GetToolResourcesBatchApiV1ToolsResourcesBatchPostErrors[keyof GetToolResourcesBatchApiV1ToolsResourcesBatchPostErrors]

export type GetToolResourcesBatchApiV1ToolsResourcesBatchPostResponses = {
  /**
   * Response Get Tool Resources Batch Api V1 Tools Resources Batch Post
   * Successful Response
   */
  200: Array<ToolResource>
}

export type GetToolResourcesBatchApiV1ToolsResourcesBatchPostResponse =
  GetToolResourcesBatchApiV1ToolsResourcesBatchPostResponses[keyof GetToolResourcesBatchApiV1ToolsResourcesBatchPostResponses]

export type GetToolApiV1ToolsToolIdGetData = {
  body?: never
  path: {
    /**
     * Tool Id
     */
    tool_id: string
  }
  query?: never
  url: '/api/v1/tools/{tool_id}'
}

export type GetToolApiV1ToolsToolIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetToolApiV1ToolsToolIdGetError =
  GetToolApiV1ToolsToolIdGetErrors[keyof GetToolApiV1ToolsToolIdGetErrors]

export type GetToolApiV1ToolsToolIdGetResponses = {
  /**
   * Successful Response
   */
  200: Tool
}

export type GetToolApiV1ToolsToolIdGetResponse =
  GetToolApiV1ToolsToolIdGetResponses[keyof GetToolApiV1ToolsToolIdGetResponses]

export type GetToolPropertiesApiV1ToolsToolIdPropertiesGetData = {
  body?: never
  path: {
    /**
     * Tool Id
     */
    tool_id: string
  }
  query?: never
  url: '/api/v1/tools/{tool_id}/properties'
}

export type GetToolPropertiesApiV1ToolsToolIdPropertiesGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetToolPropertiesApiV1ToolsToolIdPropertiesGetError =
  GetToolPropertiesApiV1ToolsToolIdPropertiesGetErrors[keyof GetToolPropertiesApiV1ToolsToolIdPropertiesGetErrors]

export type GetToolPropertiesApiV1ToolsToolIdPropertiesGetResponses = {
  /**
   * Successful Response
   */
  200: ToolProperties
}

export type GetToolPropertiesApiV1ToolsToolIdPropertiesGetResponse =
  GetToolPropertiesApiV1ToolsToolIdPropertiesGetResponses[keyof GetToolPropertiesApiV1ToolsToolIdPropertiesGetResponses]

export type GetToolResourceApiV1ToolsToolIdResourceGetData = {
  body?: never
  path: {
    /**
     * Tool Id
     */
    tool_id: string
  }
  query?: never
  url: '/api/v1/tools/{tool_id}/resource'
}

export type GetToolResourceApiV1ToolsToolIdResourceGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetToolResourceApiV1ToolsToolIdResourceGetError =
  GetToolResourceApiV1ToolsToolIdResourceGetErrors[keyof GetToolResourceApiV1ToolsToolIdResourceGetErrors]

export type GetToolResourceApiV1ToolsToolIdResourceGetResponses = {
  /**
   * Successful Response
   */
  200: ToolResource
}

export type GetToolResourceApiV1ToolsToolIdResourceGetResponse =
  GetToolResourceApiV1ToolsToolIdResourceGetResponses[keyof GetToolResourceApiV1ToolsToolIdResourceGetResponses]

export type HealthHealthGetData = {
  body?: never
  path?: never
  query?: never
  url: '/health'
}

export type HealthHealthGetResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type ClientOptions = {
  baseURL:
    | 'http://localhost:8080'
    | 'http://localhost:8080'
    | 'https://test-sandbox.onegrep.dev'
    | 'https://api.onegrep.dev'
    | (string & {})
}
