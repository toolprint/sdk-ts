// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod'

/**
 * ValidationError
 */
export const zValidationError = z.object({
  loc: z.array(z.unknown()),
  msg: z.string(),
  type: z.string()
})

/**
 * UserAccount
 * Model for storing user information including their API key
 */
export const zUserAccount = z.object({
  api_key: z.string(),
  belongs_to_organization_id: z.union([z.string(), z.null()]).optional(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  doppler_service_token_id: z.union([z.string().uuid(), z.null()]).optional(),
  id: z.string(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional()
})

/**
 * UpsertSecretResponse
 */
export const zUpsertSecretResponse = z.object({
  secret_name: z.string(),
  success: z.boolean()
})

/**
 * UpsertSecretRequest
 */
export const zUpsertSecretRequest = z.object({
  value: z.union([z.string(), z.object({})]),
  value_type: z.enum(['string', 'object'])
})

/**
 * ToolprintToolReference
 * A reference to a tool that is used in a toolprint. This reference can link to a tool directly by a unique identifier or indirectly through
 * a link to the tool server as well as the name of the tool. The latter reference is experimental and relies on the implementor
 * to ensure that the reference is correctly followed.
 */
export const zToolprintToolReference = z.object({
  id: z.union([z.string().uuid(), z.null()]).optional(),
  name: z.string(),
  ref_type: z.union([z.enum(['local', 'id']), z.null()]).optional()
})

/**
 * ToolprintTool
 * A definition of how a specific tool should be used within a toolprint.
 * This is a simplified model that focuses on the conceptual structure and specifically
 * avoids referential fields to any persisted entities.
 *
 * This tool reference is limited to the server or integration in which the toolprint was defined.
 */
export const zToolprintTool = z.object({
  ref: zToolprintToolReference,
  usage_hints: z.union([z.string(), z.null()]).optional()
})

/**
 * SearchResultMeta
 * Metadata about a search result. All search result types should inherit from this model.
 */
export const zSearchResultMeta = z.object({
  score: z.number()
})

/**
 * Prompt
 * A prompt for an LLM.
 */
export const zPrompt = z.object({
  message: z.string(),
  type: z.enum(['system', 'user'])
})

/**
 * ToolprintMeta
 * A set of meta fields that are common to all toolprints.
 */
export const zToolprintMetaOutput = z.object({
  language: z.literal('en-US').optional().default('en-US'),
  name: z.string(),
  resource_id: z.union([z.string(), z.null()]).optional(),
  version: z.string().optional().default('0.0.1')
})

/**
 * Toolprint
 * A declarative definition of a toolprint that describes how tools should be used together
 * to achieve a goal. This is a simplified model that focuses on the conceptual structure and specifically
 * avoids referential fields to any persisted entities.
 */
export const zToolprintOutput = z.object({
  goal: z.string(),
  instructions: z.union([z.string(), z.null()]),
  meta: zToolprintMetaOutput,
  tools: z.array(zToolprintTool)
})

/**
 * Tool
 * A tool.
 */
export const zTool = z.object({
  description: z.union([z.string(), z.null()]).optional(),
  icon_url: z.union([z.string().url().min(1), z.null()]).optional(),
  id: z.string().uuid(),
  input_schema: z.union([z.object({}), z.boolean()]).optional(),
  name: z.string(),
  server_id: z.string().uuid()
})

/**
 * RegisteredToolprint
 * A toolprint.
 */
export const zRegisteredToolprint = z.object({
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  created_by: z.string().optional(),
  id: z.string().uuid().optional(),
  owner_id: z.union([z.string(), z.null()]).optional(),
  source: z.object({}).optional(),
  source_checksum: z.string(),
  toolprint: zToolprintOutput,
  tools: z.array(zTool).readonly(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional(),
  updated_by: z.union([z.string(), z.null()]).optional()
})

/**
 * ToolprintRecommendation
 * A recommendation for a toolprint based on a goal.
 */
export const zToolprintRecommendation = z.object({
  meta: zSearchResultMeta,
  prompts: z.array(zPrompt),
  toolprint: zRegisteredToolprint
})

/**
 * ToolprintMeta
 * A set of meta fields that are common to all toolprints.
 */
export const zToolprintMetaInput = z.object({
  language: z.literal('en-US').optional().default('en-US'),
  name: z.string(),
  resource_id: z.union([z.string().uuid(), z.null()]).optional(),
  version: z.string().optional().default('0.0.1')
})

/**
 * Toolprint
 * A declarative definition of a toolprint that describes how tools should be used together
 * to achieve a goal. This is a simplified model that focuses on the conceptual structure and specifically
 * avoids referential fields to any persisted entities.
 */
export const zToolprintInput = z.object({
  goal: z.string(),
  instructions: z.union([z.string(), z.null()]),
  meta: zToolprintMetaInput,
  tools: z.array(zToolprintTool)
})

/**
 * ToolServerProvider
 */
export const zToolServerProvider = z.object({
  id: z.string().uuid(),
  name: z.string()
})

/**
 * ToolServerProperties
 * Properties for a tool server.
 */
export const zToolServerProperties = z.object({
  properties: z.object({})
})

/**
 * ToolServerLaunchConfig
 * The launch config for a tool server.
 */
export const zToolServerLaunchConfig = z.object({
  secret_name: z.string(),
  source: z.literal('doppler')
})

/**
 * ToolServer
 */
export const zToolServer = z.object({
  id: z.string().uuid(),
  name: z.string(),
  properties: z.object({}).optional(),
  provider_id: z.string().uuid()
})

/**
 * CanonicalResource
 * Represents a canonical resource name in object form.
 */
export const zCanonicalResource = z.object({
  event_name: z.string(),
  org_id: z.string(),
  profile_id: z.string(),
  server_name: z.string()
})

/**
 * AccessPolicyType
 * Enum for access policy types
 */
export const zAccessPolicyType = z.enum([
  'ALWAYS',
  'NEVER',
  'REQUIRES_PERMISSION'
])

/**
 * PolicyBase
 * Base model with shared policy fields
 */
export const zPolicyBase = z.object({
  access_policy: zAccessPolicyType,
  canonical_resource_name: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
  event_name: z.string(),
  organization_id: z.union([z.string(), z.null()]).optional()
})

/**
 * ToolProperties
 * Properties for a tool.
 */
export const zToolProperties = z.object({
  tags: z.object({})
})

/**
 * ToolResource
 * A broad summary of details about a tool akin to a ToolResource.
 */
export const zToolResource = z.object({
  canonical_resource: zCanonicalResource,
  description: z.union([z.string(), z.null()]).optional(),
  id: z.string(),
  integration_name: z.string(),
  org_id: z.string(),
  policy: zPolicyBase,
  profile_id: z.string(),
  properties: zToolProperties,
  provider: zToolServerProvider,
  server: zToolServer,
  tool: zTool,
  tool_name: z.string()
})

/**
 * ToolCustomTagsParamsRequest
 * Params to change the tags for a tool in an integration. Will upsert any tags that already
 * exist. Will not delete any other tags. This is only net additive.
 */
export const zToolCustomTagsParamsRequest = z.object({
  description: z.union([z.string(), z.null()]).optional(),
  integration_name: z.string(),
  tags: z.object({}),
  tool_name: z.string()
})

/**
 * ToolCustomTagSelectionParamsRequest
 * Params that generalize the selection the tags for a tool in an integration.
 */
export const zToolCustomTagSelectionParamsRequest = z.object({
  description: z.union([z.string(), z.null()]).optional(),
  integration_name: z.string(),
  tags: z.array(z.string()),
  tool_name: z.string()
})

/**
 * Strategy
 * A model representing a result for a goal-based search.
 */
export const zStrategy = z.object({
  instructions: z.string(),
  recipe_id: z.string().uuid(),
  tools: z.array(zToolResource)
})

/**
 * SmitheryConnectionInfo
 */
export const zSmitheryConnectionInfo = z.object({
  config_schema: z.union([z.object({}), z.boolean()]).optional(),
  deployment_url: z.string().url().min(1).optional(),
  type: z.enum(['ws', 'http'])
})

/**
 * SmitheryToolServerClient
 * A client for a tool server that is a smithery server.
 */
export const zSmitheryToolServerClient = z.object({
  client_type: z.literal('smithery'),
  connections: z.array(zSmitheryConnectionInfo),
  launch_config: z.union([zToolServerLaunchConfig, z.null()]).optional(),
  server_id: z.string().uuid()
})

/**
 * ServiceTokenResponse
 * Response including the service token for the SDK to use.
 */
export const zServiceTokenResponse = z.object({
  doppler_config: z.union([z.string(), z.null()]).optional(),
  doppler_env: z.union([z.string(), z.null()]).optional(),
  doppler_project: z.union([z.string(), z.null()]).optional(),
  doppler_service_token: z.union([z.string(), z.null()]).optional()
})

/**
 * PaginationMetadata
 * Metadata for paginated results
 */
export const zPaginationMetadata = z.object({
  has_next: z.boolean(),
  has_prev: z.boolean(),
  page: z.number().int(),
  page_size: z.number().int(),
  pages: z.number().int(),
  total: z.number().int()
})

/**
 * ScoredItem[Tool]
 */
export const zScoredItemTool = z.object({
  item: zTool,
  score: z.number().gte(0).lte(1)
})

/**
 * SearchResponse[ScoredItem[Tool]]
 */
export const zSearchResponseScoredItemTool = z.object({
  pagination: zPaginationMetadata,
  results: z.array(zScoredItemTool)
})

/**
 * ScoredItem[RegisteredToolprint]
 */
export const zScoredItemRegisteredToolprint = z.object({
  item: zRegisteredToolprint,
  score: z.number().gte(0).lte(1)
})

/**
 * SearchResponse[ScoredItem[RegisteredToolprint]]
 */
export const zSearchResponseScoredItemRegisteredToolprint = z.object({
  pagination: zPaginationMetadata,
  results: z.array(zScoredItemRegisteredToolprint)
})

/**
 * SearchRequest
 * A request for a search.
 */
export const zSearchRequest = z.object({
  k: z.number().int().optional().default(10),
  min_score: z.number().optional().default(0),
  page: z.number().int().optional().default(0),
  page_size: z.number().int().optional().default(10),
  query: z.string()
})

/**
 * Recipe
 * A recipe.
 */
export const zRecipe = z.object({
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  goal: z.string(),
  id: z.string().uuid().optional(),
  instructions: z.union([z.string(), z.null()]),
  tools: z.array(zTool).readonly(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional()
})

/**
 * PolicyCheckResult
 * Result of a policy check
 */
export const zPolicyCheckResult = z.object({
  approved: z.boolean()
})

/**
 * PolicyAccessRule
 * Policy template that is used to create a policy.
 */
export const zPolicyAccessRule = z.object({
  access_policy: zAccessPolicyType,
  description: z.union([z.string(), z.null()]).optional(),
  event_name: z.string()
})

/**
 * Policy
 * Policy model that works with both SQL and in-memory storage
 */
export const zPolicy = z.object({
  access_policy: zAccessPolicyType,
  canonical_resource_name: z.string(),
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  description: z.union([z.string(), z.null()]).optional(),
  event_name: z.string(),
  id: z.string().uuid().optional(),
  organization_id: z.union([z.string(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional()
})

/**
 * AuditLog
 * Model for audit logging
 */
export const zAuditLog = z.object({
  action: z.string(),
  details: z.object({}).optional(),
  id: z.union([z.number().int(), z.null()]).optional(),
  performed_by: z.string().optional().default('system'),
  policy_id: z.string().uuid(),
  timestamp: z.string().datetime().optional()
})

/**
 * PaginatedResponse[AuditLog]
 */
export const zPaginatedResponseAuditLog = z.object({
  items: z.array(zAuditLog),
  pagination: zPaginationMetadata
})

/**
 * Organization
 */
export const zOrganization = z.object({
  created_at: z.union([z.string().datetime(), z.null()]).optional(),
  created_by_user_id: z.union([z.string(), z.null()]).optional(),
  id: z.string(),
  open_invitation_code: z.union([z.string(), z.null()]).optional(),
  owner_id: z.union([z.string(), z.null()]).optional(),
  updated_at: z.union([z.string().datetime(), z.null()]).optional()
})

/**
 * NewPolicyRequest
 * Model to create a new policy. Other policy fields are derived from the default policy for the
 * integration/event
 */
export const zNewPolicyRequest = z.object({
  access_policy: zAccessPolicyType,
  event_name: z.string(),
  integration_name: z.string()
})

/**
 * MultipleToolCustomTagsParamsRequest
 * Params to change the tags for multiple tools in an integration.
 */
export const zMultipleToolCustomTagsParamsRequest = z.object({
  tags: z.object({}),
  tool_names: z.array(z.string())
})

/**
 * MultiIdPostBody
 * A multi-id post body.
 */
export const zMultiIdPostBody = z.object({
  ids: z.union([z.array(z.string()), z.array(z.string().uuid())])
})

/**
 * MCPToolServerClient
 * A client for a tool server that is a direct MCP server connection.
 */
export const zMcpToolServerClient = z.object({
  client_type: z.literal('mcp'),
  server_id: z.string().uuid(),
  transport_type: z.enum(['sse', 'websocket']),
  url: z.string().url().min(1)
})

/**
 * MCPIntegrationArgs
 * Arguments specifically for an integration that is powered by an MCP server.
 */
export const zMcpIntegrationArgs = z.object({
  args: z.union([z.array(z.string()), z.null()]).optional(),
  command: z.string(),
  type: z.literal('mcp')
})

/**
 * IntegrationAuthScheme
 * Authentication schemes supported by server templates.
 */
export const zIntegrationAuthScheme = z.enum([
  'token',
  'oauth_1_0',
  'oauth_2_0'
])

/**
 * IntegrationDefaultPolicies
 * Default policies for an integration.
 */
export const zIntegrationDefaultPolicies = z.object({
  tools: z.array(zPolicyAccessRule)
})

/**
 * IntegrationOAuthAuthorizer
 */
export const zIntegrationOAuthAuthorizer = z.enum(['google', 'meta'])

/**
 * IntegrationSecret
 * Represents a secret required by a server template.
 */
export const zIntegrationSecret = z.object({
  generation_link: z.union([z.string(), z.null()]).optional(),
  name: z.string(),
  value: z.union([z.string(), z.null()]).optional()
})

/**
 * IntegrationTemplate
 * Class representation of the server templates that we support. This matches the structure
 * of server templates under resources/integrations/templates*
 */
export const zIntegrationTemplate = z.object({
  args: z
    .object({
      type: z.literal('mcp')
    })
    .and(zMcpIntegrationArgs),
  auth_scheme: z.union([zIntegrationAuthScheme, z.null()]).optional(),
  default_policies: zIntegrationDefaultPolicies,
  name: z.string(),
  oauth_authorizer: z.union([zIntegrationOAuthAuthorizer, z.null()]).optional(),
  repository: z.string(),
  secrets: z.union([z.array(zIntegrationSecret), z.null()]).optional(),
  sha: z.string(),
  version: z.string()
})

/**
 * IntegrationConfigurationState
 * The state of an integration from an account perspective (not runtime).
 * To determine the runtime state, we will have to check the server configuration for
 * the integration separately depending on our infrastucture selection.
 */
export const zIntegrationConfigurationState = z.enum([
  'agent_local',
  'cloud_hosted_available',
  'cloud_hosted_configured'
])

/**
 * IntegrationConfigDetails
 * General details about an integration. Meant to be surfaceable to a client.
 */
export const zIntegrationConfigDetails = z.object({
  configuration_state: zIntegrationConfigurationState,
  name: z.string(),
  template: zIntegrationTemplate
})

/**
 * BlaxelToolServerClient
 * A client for a tool server that is a blaxel server.
 */
export const zBlaxelToolServerClient = z.object({
  blaxel_function: z.string(),
  blaxel_workspace: z.string(),
  client_type: z.literal('blaxel'),
  server_id: z.string().uuid()
})

/**
 * ComposioToolServerClient
 * A client for a tool server that is a composio server.
 */
export const zComposioToolServerClient = z.object({
  allowed_tools: z.array(z.string()),
  auth_config_id: z.string(),
  client_type: z.literal('composio'),
  composio_server_id: z.string(),
  mcp_url: z.string(),
  server_id: z.string().uuid()
})

/**
 * InitializeResponse
 * Response for the SDK to initialize.
 */
export const zInitializeResponse = z.object({
  clients: z.array(z.unknown()),
  doppler_config: z.union([z.string(), z.null()]).optional(),
  doppler_env: z.union([z.string(), z.null()]).optional(),
  doppler_project: z.union([z.string(), z.null()]).optional(),
  doppler_service_token: z.union([z.string(), z.null()]).optional(),
  org_id: z.string(),
  providers: z.array(zToolServerProvider),
  servers: z.array(zToolServer),
  tools: z.array(zTool),
  user_id: z.string()
})

/**
 * HTTPValidationError
 */
export const zHttpValidationError = z.object({
  detail: z.array(zValidationError).optional()
})

/**
 * GetAllFlagsResponse
 */
export const zGetAllFlagsResponse = z.object({
  flags: z.object({}),
  user_id: z.string()
})

/**
 * Body_upsert_secret_api_v1_secrets__secret_name__put
 */
export const zBodyUpsertSecretApiV1SecretsSecretNamePut = z.object({
  request: zUpsertSecretRequest
})

/**
 * BasicPostResponse
 * A basic post response.
 */
export const zBasicPostResponse = z.object({
  message: z.union([z.string(), z.null()]).optional(),
  success: z.boolean()
})

/**
 * BasicPostBody
 * A basic post body.
 */
export const zBasicPostBody = z.object({
  content: z.string()
})

/**
 * AuthenticationMethod
 */
export const zAuthenticationMethod = z.enum(['propelauth', 'api_key'])

/**
 * AuthenticationStatus
 */
export const zAuthenticationStatus = z.object({
  credentials_provided: z.boolean(),
  is_authenticated: z.boolean(),
  method: z.union([zAuthenticationMethod, z.null()]).optional(),
  user_id: z.union([z.string(), z.null()]).optional()
})

/**
 * ActionApprovalState
 * Enum for policy approval states
 */
export const zActionApprovalState = z.enum(['pending', 'approved', 'rejected'])

/**
 * ActionApprovalRequest
 * Model that holds the state of a request for an action to be taken with respect to a policy.
 * Ex. if the policy is set to require approval, then we will have a request for approval.
 */
export const zActionApprovalRequest = z.object({
  created_at: z.string().datetime().optional(),
  id: z.union([z.number().int(), z.null()]),
  last_updated_at: z.string().datetime().optional(),
  payload: z.union([z.object({}), z.null()]).optional(),
  policy_id: z.string().uuid(),
  state: zActionApprovalState.optional(),
  updated_by_user_id: z.string()
})

/**
 * ApprovalAndPolicy
 * Approval and policy
 */
export const zApprovalAndPolicy = z.object({
  approval: zActionApprovalRequest,
  canonical_resource_name: z.string(),
  integration_name: z.string(),
  policy: zPolicy,
  tool_name: z.string()
})

/**
 * AccountInformation
 * Model for storing account information
 */
export const zAccountInformation = z.object({
  account: zUserAccount,
  organization: zOrganization,
  user_id: z.string()
})

/**
 * AccountCreateRequest
 */
export const zAccountCreateRequest = z.object({
  email: z.string(),
  invitation_code: z.string()
})

/**
 * Successful Response
 */
export const zGetAiDocumentationAiTxtGetResponse = z.string()

/**
 * Response Delete Account Api V1 Account  Delete
 * Successful Response
 */
export const zDeleteAccountApiV1AccountDeleteResponse = z.boolean()

/**
 * Successful Response
 */
export const zGetAccountInformationApiV1AccountGetResponse = zAccountInformation

/**
 * Successful Response
 */
export const zCreateAccountApiV1AccountPostResponse = zUserAccount

/**
 * Successful Response
 */
export const zGetApiKeyApiV1AccountApiKeyGetResponse = zUserAccount

/**
 * Successful Response
 */
export const zGetAuthStatusApiV1AccountAuthStatusGetResponse =
  zAuthenticationStatus

export const zCreateAccountByInvitationApiV1AccountInvitationCodePostData =
  zAccountCreateRequest

/**
 * Successful Response
 */
export const zCreateAccountByInvitationApiV1AccountInvitationCodePostResponse =
  zAccountInformation

/**
 * Successful Response
 */
export const zGetServiceTokenApiV1AccountServiceTokenGetResponse =
  zServiceTokenResponse

/**
 * Successful Response
 */
export const zRotateServiceTokenApiV1AccountServiceTokenPostResponse =
  zServiceTokenResponse

/**
 * Page
 * Page number (1-indexed)
 */
export const zGetAuditLogsApiV1AuditGetParameterPage = z
  .number()
  .int()
  .gte(1)
  .default(1)

/**
 * Page Size
 * Items per page
 */
export const zGetAuditLogsApiV1AuditGetParameterPageSize = z
  .number()
  .int()
  .gte(1)
  .lte(500)
  .default(100)

/**
 * Policy Id
 * Filter by policy ID
 */
export const zGetAuditLogsApiV1AuditGetParameterPolicyId = z.union([
  z.string(),
  z.null()
])

/**
 * Action
 * Filter by action type
 */
export const zGetAuditLogsApiV1AuditGetParameterAction = z.union([
  z.string(),
  z.null()
])

/**
 * Start Date
 * Filter logs after this date (ISO format)
 */
export const zGetAuditLogsApiV1AuditGetParameterStartDate = z.union([
  z.string().datetime(),
  z.null()
])

/**
 * End Date
 * Filter logs before this date (ISO format)
 */
export const zGetAuditLogsApiV1AuditGetParameterEndDate = z.union([
  z.string().datetime(),
  z.null()
])

/**
 * Successful Response
 */
export const zGetAuditLogsApiV1AuditGetResponse = zPaginatedResponseAuditLog

/**
 * Successful Response
 */
export const zGetAllFlagsApiV1FlagsGetResponse = zGetAllFlagsResponse

/**
 * Active
 */
export const zListIntegrationsApiV1IntegrationsGetParameterActive = z
  .boolean()
  .default(false)

/**
 * Response List Integrations Api V1 Integrations  Get
 * Successful Response
 */
export const zListIntegrationsApiV1IntegrationsGetResponse = z.array(
  zIntegrationConfigDetails
)

/**
 * Integration Name
 */
export const zGetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetParameterIntegrationName =
  z.string()

/**
 * Response Get Integration Tools Api V1 Integrations  Integration Name  Tools Get
 * Successful Response
 */
export const zGetIntegrationToolsApiV1IntegrationsIntegrationNameToolsGetResponse =
  z.array(zToolResource)

export const zUpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostData =
  zMultipleToolCustomTagsParamsRequest

/**
 * Integration Name
 */
export const zUpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostParameterIntegrationName =
  z.string()

/**
 * Response Upsert Multiple Tool Custom Tags Api V1 Integrations  Integration Name  Tools Custom Tags Post
 * Successful Response
 */
export const zUpsertMultipleToolCustomTagsApiV1IntegrationsIntegrationNameToolsCustomTagsPostResponse =
  z.array(zToolResource)

/**
 * Integration Name
 */
export const zGetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetParameterIntegrationName =
  z.string()

/**
 * Tool Name
 */
export const zGetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetParameterToolName =
  z.string()

/**
 * Successful Response
 */
export const zGetToolDetailsApiV1IntegrationsIntegrationNameToolsToolNameGetResponse =
  zToolResource

export const zDeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteData =
  zToolCustomTagSelectionParamsRequest

/**
 * Integration Name
 */
export const zDeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteParameterIntegrationName =
  z.string()

/**
 * Tool Name
 */
export const zDeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteParameterToolName =
  z.string()

/**
 * Successful Response
 */
export const zDeleteToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsDeleteResponse =
  zToolResource

export const zUpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostData =
  zToolCustomTagsParamsRequest

/**
 * Integration Name
 */
export const zUpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostParameterIntegrationName =
  z.string()

/**
 * Tool Name
 */
export const zUpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostParameterToolName =
  z.string()

/**
 * Successful Response
 */
export const zUpsertToolCustomTagsApiV1IntegrationsIntegrationNameToolsToolNameCustomTagsPostResponse =
  zToolResource

/**
 * Skip
 */
export const zGetAllPoliciesApiV1PoliciesGetParameterSkip = z
  .number()
  .int()
  .default(0)

/**
 * Limit
 */
export const zGetAllPoliciesApiV1PoliciesGetParameterLimit = z
  .number()
  .int()
  .default(100)

/**
 * Response Get All Policies Api V1 Policies  Get
 * Successful Response
 */
export const zGetAllPoliciesApiV1PoliciesGetResponse = z.array(zPolicy)

export const zCreatePolicyApiV1PoliciesPostData = zNewPolicyRequest

/**
 * Successful Response
 */
export const zCreatePolicyApiV1PoliciesPostResponse = zPolicy

/**
 * Page
 */
export const zGetApprovalRequestsApiV1PoliciesApprovalsGetParameterPage = z
  .number()
  .int()
  .default(0)

/**
 * Page Size
 */
export const zGetApprovalRequestsApiV1PoliciesApprovalsGetParameterPageSize = z
  .number()
  .int()
  .default(100)

/**
 * Response Get Approval Requests Api V1 Policies Approvals Get
 * Successful Response
 */
export const zGetApprovalRequestsApiV1PoliciesApprovalsGetResponse =
  z.array(zApprovalAndPolicy)

/**
 * Successful Response
 */
export const zCheckResourceAccessGetApiV1PoliciesResourcesCheckGetResponse =
  zPolicyCheckResult

/**
 * Successful Response
 */
export const zCheckResourceAccessApiV1PoliciesResourcesCheckPostResponse =
  zPolicyCheckResult

/**
 * Resource Name
 */
export const zCheckResourceForApprovalApiV1PoliciesResourcesResourceNameApprovalGetParameterResourceName =
  z.string()

/**
 * Policy Id
 */
export const zGetPolicyApiV1PoliciesPolicyIdGetParameterPolicyId = z.string()

/**
 * Successful Response
 */
export const zGetPolicyApiV1PoliciesPolicyIdGetResponse = zPolicy

/**
 * Update Data
 */
export const zUpdatePolicyApiV1PoliciesPolicyIdPutData = z.object({})

/**
 * Policy Id
 */
export const zUpdatePolicyApiV1PoliciesPolicyIdPutParameterPolicyId = z.string()

/**
 * Successful Response
 */
export const zUpdatePolicyApiV1PoliciesPolicyIdPutResponse = zPolicy

/**
 * Policy Id
 */
export const zCheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostParameterPolicyId =
  z.string().uuid()

/**
 * Audit Id
 */
export const zCheckPolicyStatusApiV1PoliciesPolicyIdAuditIdStatusPostParameterAuditId =
  z.number().int()

/**
 * Response List Providers Api V1 Providers  Get
 * Successful Response
 */
export const zListProvidersApiV1ProvidersGetResponse =
  z.array(zToolServerProvider)

/**
 * Provider Id
 */
export const zGetProviderApiV1ProvidersProviderIdGetParameterProviderId =
  z.string()

/**
 * Successful Response
 */
export const zGetProviderApiV1ProvidersProviderIdGetResponse =
  zToolServerProvider

/**
 * Provider Id
 */
export const zGetServersApiV1ProvidersProviderIdServersGetParameterProviderId =
  z.string()

/**
 * Response Get Servers Api V1 Providers  Provider Id  Servers Get
 * Successful Response
 */
export const zGetServersApiV1ProvidersProviderIdServersGetResponse =
  z.array(zToolServer)

/**
 * Provider Id
 */
export const zSyncProviderApiV1ProvidersProviderIdSyncPostParameterProviderId =
  z.string()

/**
 * Successful Response
 */
export const zInitializeApiV1SdkInitializeGetResponse = zInitializeResponse

/**
 * Successful Response
 */
export const zGetServiceTokenApiV1SdkServiceTokenGetResponse =
  zServiceTokenResponse

export const zSearchToolprintsApiV1SearchToolprintsPostData = zSearchRequest

/**
 * Successful Response
 */
export const zSearchToolprintsApiV1SearchToolprintsPostResponse =
  zSearchResponseScoredItemRegisteredToolprint

export const zGetToolprintRecommendationApiV1SearchToolprintsRecommendationPostData =
  zSearchRequest

/**
 * Successful Response
 */
export const zGetToolprintRecommendationApiV1SearchToolprintsRecommendationPostResponse =
  zToolprintRecommendation

export const zSearchToolsApiV1SearchToolsPostData = zSearchRequest

/**
 * Successful Response
 */
export const zSearchToolsApiV1SearchToolsPostResponse =
  zSearchResponseScoredItemTool

/**
 * Secret Name
 */
export const zGetSecretApiV1SecretsSecretNameGetParameterSecretName = z.string()

/**
 * Response Get Secret Api V1 Secrets  Secret Name  Get
 * Successful Response
 */
export const zGetSecretApiV1SecretsSecretNameGetResponse = z.object({})

export const zUpsertSecretApiV1SecretsSecretNamePutData =
  zBodyUpsertSecretApiV1SecretsSecretNamePut

/**
 * X-Onegrep-Profile-Id
 */
export const zUpsertSecretApiV1SecretsSecretNamePutParameterXOnegrepProfileId =
  z.union([z.string(), z.null()])

/**
 * Secret Name
 */
export const zUpsertSecretApiV1SecretsSecretNamePutParameterSecretName =
  z.string()

/**
 * Successful Response
 */
export const zUpsertSecretApiV1SecretsSecretNamePutResponse =
  zUpsertSecretResponse

/**
 * Response List Servers Api V1 Servers  Get
 * Successful Response
 */
export const zListServersApiV1ServersGetResponse = z.array(zToolServer)

/**
 * Server Id
 */
export const zGetServerApiV1ServersServerIdGetParameterServerId = z.string()

/**
 * Successful Response
 */
export const zGetServerApiV1ServersServerIdGetResponse = zToolServer

/**
 * Server Id
 */
export const zGetServerClientApiV1ServersServerIdClientGetParameterServerId =
  z.string()

/**
 * Response Get Server Client Api V1 Servers  Server Id  Client Get
 * Successful Response
 */
export const zGetServerClientApiV1ServersServerIdClientGetResponse = z.union([
  z
    .object({
      client_type: z.literal('mcp')
    })
    .and(zMcpToolServerClient),
  z
    .object({
      client_type: z.literal('blaxel')
    })
    .and(zBlaxelToolServerClient),
  z
    .object({
      client_type: z.literal('smithery')
    })
    .and(zSmitheryToolServerClient),
  z
    .object({
      client_type: z.literal('composio')
    })
    .and(zComposioToolServerClient)
])

/**
 * Server Id
 */
export const zGetServerPropertiesApiV1ServersServerIdPropertiesGetParameterServerId =
  z.string()

/**
 * Successful Response
 */
export const zGetServerPropertiesApiV1ServersServerIdPropertiesGetResponse =
  zToolServerProperties

/**
 * Value
 */
export const zPatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchData =
  z.object({})

/**
 * Server Id
 */
export const zPatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchParameterServerId =
  z.string()

/**
 * Key
 */
export const zPatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchParameterKey =
  z.string()

/**
 * Successful Response
 */
export const zPatchServerPropertiesApiV1ServersServerIdPropertiesKeyPatchResponse =
  zToolServerProperties

export const zGetStrategyApiV1StrategyPostData = zSearchRequest

/**
 * Response Get Strategy Api V1 Strategy  Post
 * Successful Response
 */
export const zGetStrategyApiV1StrategyPostResponse = z.array(zStrategy)

/**
 * Response Create Fake Recipes Api V1 Strategy Fake Post
 * Successful Response
 */
export const zCreateFakeRecipesApiV1StrategyFakePostResponse = z.array(zRecipe)

export const zCreateToolprintApiV1ToolprintsPostData = zToolprintInput

/**
 * Successful Response
 */
export const zCreateToolprintApiV1ToolprintsPostResponse = zRegisteredToolprint

/**
 * Successful Response
 */
export const zGetToolprintInstructionsApiV1ToolprintsWellKnownAiTxtGetResponse =
  z.string()

/**
 * Response Get Toolprint Schema Api V1 Toolprints  Well Known Schema Get
 * Successful Response
 */
export const zGetToolprintSchemaApiV1ToolprintsWellKnownSchemaGetResponse =
  z.object({})

/**
 * Successful Response
 */
export const zGetToolprintTemplateApiV1ToolprintsWellKnownTemplateGetResponse =
  z.string()

export const zCreateToolprintJsonApiV1ToolprintsJsonPostData = zBasicPostBody

/**
 * Successful Response
 */
export const zCreateToolprintJsonApiV1ToolprintsJsonPostResponse =
  zRegisteredToolprint

export const zValidateToolprintApiV1ToolprintsValidatePostData = zToolprintInput

/**
 * Successful Response
 */
export const zValidateToolprintApiV1ToolprintsValidatePostResponse =
  zBasicPostResponse

export const zValidateToolprintJsonApiV1ToolprintsValidateJsonPostData =
  zBasicPostBody

/**
 * Yaml Content
 */
export const zValidateToolprintYamlApiV1ToolprintsValidateYamlPostData =
  z.string()

/**
 * Successful Response
 */
export const zValidateToolprintYamlApiV1ToolprintsValidateYamlPostResponse =
  zBasicPostResponse

/**
 * Yaml Content
 */
export const zCreateToolprintYamlApiV1ToolprintsYamlPostData = z.string()

/**
 * Successful Response
 */
export const zCreateToolprintYamlApiV1ToolprintsYamlPostResponse =
  zRegisteredToolprint

/**
 * Toolprint Id
 */
export const zGetToolprintApiV1ToolprintsToolprintIdGetParameterToolprintId = z
  .string()
  .uuid()

/**
 * Successful Response
 */
export const zGetToolprintApiV1ToolprintsToolprintIdGetResponse =
  zRegisteredToolprint

/**
 * Response List Tools Api V1 Tools  Get
 * Successful Response
 */
export const zListToolsApiV1ToolsGetResponse = z.array(zTool)

export const zGetToolResourcesBatchApiV1ToolsResourcesBatchPostData =
  zMultiIdPostBody

/**
 * Response Get Tool Resources Batch Api V1 Tools Resources Batch Post
 * Successful Response
 */
export const zGetToolResourcesBatchApiV1ToolsResourcesBatchPostResponse =
  z.array(zToolResource)

/**
 * Tool Id
 */
export const zGetToolApiV1ToolsToolIdGetParameterToolId = z.string()

/**
 * Successful Response
 */
export const zGetToolApiV1ToolsToolIdGetResponse = zTool

/**
 * Tool Id
 */
export const zGetToolPropertiesApiV1ToolsToolIdPropertiesGetParameterToolId =
  z.string()

/**
 * Successful Response
 */
export const zGetToolPropertiesApiV1ToolsToolIdPropertiesGetResponse =
  zToolProperties

/**
 * Tool Id
 */
export const zGetToolResourceApiV1ToolsToolIdResourceGetParameterToolId =
  z.string()

/**
 * Successful Response
 */
export const zGetToolResourceApiV1ToolsToolIdResourceGetResponse = zToolResource
